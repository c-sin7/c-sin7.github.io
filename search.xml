<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ASM</title>
      <link href="/2023/02/10/ASM/"/>
      <url>/2023/02/10/ASM/</url>
      
        <content type="html"><![CDATA[<h3 id="2-2-INT-21H的1号功能，输入一个字符串”Hello-world”-存放在内存，然后倒序输出"><a href="#2-2-INT-21H的1号功能，输入一个字符串”Hello-world”-存放在内存，然后倒序输出" class="headerlink" title="2.2 INT 21H的1号功能，输入一个字符串”Hello,world”,存放在内存，然后倒序输出"></a>2.2 INT 21H的1号功能，输入一个字符串”Hello,world”,存放在内存，然后倒序输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">;2.2 INT 21H的1号功能，输入一个字符串&quot;Hello,world&quot;,存放在内存，然后倒序输出</span><br><span class="line">S1 SEGMENT</span><br><span class="line"></span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">;输入 cx作计数器</span><br><span class="line">    SUB CX,CX</span><br><span class="line">L1: </span><br><span class="line">MOV AH,1</span><br><span class="line">    INT 21H</span><br><span class="line">    CMP AL,0DH</span><br><span class="line">    JE  L2</span><br><span class="line">    XOR AH,AH</span><br><span class="line">    PUSH AX</span><br><span class="line">    INC CX</span><br><span class="line">    JMP L1</span><br><span class="line">    </span><br><span class="line">    ;输出</span><br><span class="line">L2: </span><br><span class="line">POP DX</span><br><span class="line">    MOV AH,2</span><br><span class="line">    INT 21H</span><br><span class="line">    LOOP L2</span><br><span class="line">    </span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-INT-21H的A号功能，输入一个字符串”Hello-world”-存放在内存，然后倒序输出"><a href="#2-3-INT-21H的A号功能，输入一个字符串”Hello-world”-存放在内存，然后倒序输出" class="headerlink" title="2.3 INT 21H的A号功能，输入一个字符串”Hello,world”,存放在内存，然后倒序输出"></a>2.3 INT 21H的A号功能，输入一个字符串”Hello,world”,存放在内存，然后倒序输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">;2.3 INT 21H的A号功能，输入一个字符串&quot;Hello,world&quot;,存放在内存，然后倒序输出</span><br><span class="line">S1 SEGMENT</span><br><span class="line">BUFF DB 250,?,250 DUP(?)</span><br><span class="line">SHOW DB 0DH,0AH,&#x27;THE REVERSE STRING IS:$&#x27;</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT STACK</span><br><span class="line">    DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">;输入</span><br><span class="line">MOV AH,0AH</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MOV SI,DX</span><br><span class="line">INC SI</span><br><span class="line">MOV AL,DS:[SI];真实数据总个数</span><br><span class="line">CBW </span><br><span class="line">MOV CX,AX;计数器</span><br><span class="line">ADD SI,AX;串尾 不包括ODH</span><br><span class="line"></span><br><span class="line">;输出</span><br><span class="line">LEA DX,SHOW</span><br><span class="line">MOV AH,09H</span><br><span class="line">INT 21H</span><br><span class="line">L0:</span><br><span class="line">MOV DL,DS:[SI]</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">DEC SI</span><br><span class="line">LOOP L0</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="3-1-将-BX-中的无符号数以二进制的形式输出"><a href="#3-1-将-BX-中的无符号数以二进制的形式输出" class="headerlink" title="3.1 将 BX 中的无符号数以二进制的形式输出"></a>3.1 将 BX 中的无符号数以二进制的形式输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">;3.1将 BX 中的无符号数以二进制的形式输出</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    A DW 6C3BH  </span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DB 30 DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line">    </span><br><span class="line">    MOV CX,10H</span><br><span class="line">    MOV BX,A</span><br><span class="line">L0: </span><br><span class="line">ROL BX,1</span><br><span class="line">    MOV DL,30H</span><br><span class="line">    ADC DL,0</span><br><span class="line">    MOV AH,2</span><br><span class="line">    INT 21H</span><br><span class="line">    LOOP L0</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4-将BX的无符号数以十进制数形式输出"><a href="#3-4-将BX的无符号数以十进制数形式输出" class="headerlink" title="3.4 将BX的无符号数以十进制数形式输出"></a>3.4 将BX的无符号数以十进制数形式输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">;3.4 将 BX 中的无符号数以十进制的形式输出</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    A DW 2A3BH</span><br><span class="line">    CNT DW 0</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line">    </span><br><span class="line">    MOV BX,A</span><br><span class="line">MOV AX,BX</span><br><span class="line">MOV CX,0AH</span><br><span class="line"></span><br><span class="line">;转化并入栈</span><br><span class="line">;DX余数 AX商</span><br><span class="line">L0:</span><br><span class="line">XOR DX,DX</span><br><span class="line">DIV CX</span><br><span class="line">PUSH DX;余数进栈</span><br><span class="line">INC CNT</span><br><span class="line">CMP AX,0</span><br><span class="line">JNE L0</span><br><span class="line"></span><br><span class="line">;输出</span><br><span class="line">MOV CX,CNT</span><br><span class="line">L1:</span><br><span class="line">POP DX</span><br><span class="line">ADD DX,30H</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">LOOP L1</span><br><span class="line"></span><br><span class="line">EXIT:   </span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="3-5-将BX的有符号数以十进制数形式输出"><a href="#3-5-将BX的有符号数以十进制数形式输出" class="headerlink" title="3.5 将BX的有符号数以十进制数形式输出"></a>3.5 将BX的有符号数以十进制数形式输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">;3.5 将BX的有符号数以十进制数形式输出</span><br><span class="line">S1 SEGMENT</span><br><span class="line">A DW 8000H</span><br><span class="line">S1 ENDS</span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line">S3 SEGMENT</span><br><span class="line">ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S1</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV AX,S2</span><br><span class="line">MOV SS,AX</span><br><span class="line">LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV BX,A</span><br><span class="line">MOV AX,BX</span><br><span class="line">MOV DI,10</span><br><span class="line">MOV CX,0</span><br><span class="line"></span><br><span class="line">;判断正负数</span><br><span class="line">CMP AX,0</span><br><span class="line">JGE L1</span><br><span class="line"></span><br><span class="line">NEG AX</span><br><span class="line">PUSH AX</span><br><span class="line">MOV DL,&#x27;-&#x27;</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">POP AX</span><br><span class="line"></span><br><span class="line">L0:</span><br><span class="line">XOR DX,DX</span><br><span class="line">IDIV DI    ;/10</span><br><span class="line">PUSH DX    ;压余数</span><br><span class="line">INC CX     ;记录除了几次</span><br><span class="line">CMP AX,0   ;比较除完了没</span><br><span class="line">JNE L0</span><br><span class="line"></span><br><span class="line">L1:</span><br><span class="line">POP DX</span><br><span class="line">ADD DX,30H</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">LOOP L1</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="4-2-输入两个字X-Y，计算Z-X-Y-并把Z的结果显示出来，X-Y的输入可以是任何进制"><a href="#4-2-输入两个字X-Y，计算Z-X-Y-并把Z的结果显示出来，X-Y的输入可以是任何进制" class="headerlink" title="4.2 输入两个字X,Y，计算Z=X+Y,并把Z的结果显示出来，X,Y的输入可以是任何进制"></a>4.2 输入两个字X,Y，计算Z=X+Y,并把Z的结果显示出来，X,Y的输入可以是任何进制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">;4.2 输入两个字X,Y，计算Z=X+Y,并把Z的结果显示出来，X,Y的输入可以是任何进制</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    X DW 0</span><br><span class="line">    Y DW 0</span><br><span class="line">    Z DW 0</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line">    </span><br><span class="line">    MOV CX,16</span><br><span class="line">    XOR BX,BX</span><br><span class="line">    </span><br><span class="line">    ;输入并放置在bx</span><br><span class="line">L0: </span><br><span class="line">MOV AH,1</span><br><span class="line">    INT 21H</span><br><span class="line">    CMP AL,0DH</span><br><span class="line">    JE  L1</span><br><span class="line">    CMP AL,30H</span><br><span class="line">    JB L0</span><br><span class="line">    CMP AL,31H</span><br><span class="line">    JA L0</span><br><span class="line">    SHR AL,1</span><br><span class="line">    RCL BX,1</span><br><span class="line">    LOOP L0</span><br><span class="line">L1:</span><br><span class="line">MOV X,BX</span><br><span class="line"></span><br><span class="line">;吸收回车</span><br><span class="line">MOV AH,1</span><br><span class="line">INT 21H  </span><br><span class="line">    </span><br><span class="line">    ;输入并放置在bx</span><br><span class="line">L2: </span><br><span class="line">MOV AH,1</span><br><span class="line">    INT 21H</span><br><span class="line">    CMP AL,0DH</span><br><span class="line">    JE  L3</span><br><span class="line">    CMP AL,30H</span><br><span class="line">    JB L2</span><br><span class="line">    CMP AL,31H</span><br><span class="line">    JA L2</span><br><span class="line">    SHR AL,1</span><br><span class="line">    RCL BX,1</span><br><span class="line">    LOOP L2</span><br><span class="line">L3:</span><br><span class="line">MOV Y,BX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;两数相加</span><br><span class="line">MOV DX,X</span><br><span class="line">MOV BX,Y</span><br><span class="line">ADD BX,DX</span><br><span class="line">MOV CX,16</span><br><span class="line">L4:</span><br><span class="line">ROL BX,1</span><br><span class="line">MOV DX,30H</span><br><span class="line">ADC DX,0</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">LOOP L4</span><br><span class="line">    </span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line"></span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-输入一个有符号的十进制数，并以十六进制输出"><a href="#4-3-输入一个有符号的十进制数，并以十六进制输出" class="headerlink" title="4.3 输入一个有符号的十进制数，并以十六进制输出"></a>4.3 输入一个有符号的十进制数，并以十六进制输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">;4.3 输入一个有符号的十进制数，并以十六进制输出</span><br><span class="line">S1 SEGMENT</span><br><span class="line">NUM DW 8000</span><br><span class="line">FDW 0</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S1</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV AX,S2</span><br><span class="line">MOV SS,AX</span><br><span class="line">LEA SP,TOP</span><br><span class="line">XOR BX,BX</span><br><span class="line"></span><br><span class="line">CALL READIN</span><br><span class="line">CMP F,0</span><br><span class="line">JNEL3</span><br><span class="line">L3:</span><br><span class="line">NEG BX</span><br><span class="line">CALL CHANGE</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line"></span><br><span class="line">READIN PROC NEAR</span><br><span class="line">;输入 判断正负</span><br><span class="line">L0:</span><br><span class="line">MOV AH,1</span><br><span class="line">INT 21H</span><br><span class="line">CMP AL,0DH</span><br><span class="line">JE  EXIT1</span><br><span class="line">CMP AL,&#x27;-&#x27;</span><br><span class="line">JNE L1</span><br><span class="line">INC F</span><br><span class="line"></span><br><span class="line">L1:</span><br><span class="line">SUB AL,30H</span><br><span class="line">JL  L0</span><br><span class="line">CMP AL,9D</span><br><span class="line">JGL0</span><br><span class="line"></span><br><span class="line">;-&gt;10</span><br><span class="line">CBW</span><br><span class="line">XCHG AX,BX</span><br><span class="line">MOV CX,10D</span><br><span class="line">MUL CX</span><br><span class="line">XCHG BX,AX</span><br><span class="line">ADD BX,AX</span><br><span class="line">JMP L0</span><br><span class="line"></span><br><span class="line">EXIT1:</span><br><span class="line">RET</span><br><span class="line"></span><br><span class="line">READIN ENDP</span><br><span class="line"></span><br><span class="line">CHANGE PROC NEAR</span><br><span class="line">;10-&gt;16</span><br><span class="line">MOV CX,4</span><br><span class="line">L2:</span><br><span class="line">PUSH CX</span><br><span class="line">MOV CL,4</span><br><span class="line">ROL BX,CL</span><br><span class="line">MOV DL,BL</span><br><span class="line">AND DL,0FH</span><br><span class="line">ADD DL,30H</span><br><span class="line">CMP DL,39H</span><br><span class="line">JBE DISP</span><br><span class="line">ADD DL,7</span><br><span class="line">DISP:</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">POP CX</span><br><span class="line">LOOP L2</span><br><span class="line"></span><br><span class="line">RET</span><br><span class="line">CHANGE ENDP</span><br><span class="line"></span><br><span class="line">S3 ENDS</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-1-试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来"><a href="#5-1-试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来" class="headerlink" title="5.1 试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来"></a>5.1 试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">;5.1对键盘输入的小写字母用大写字母显示出来</span><br><span class="line">S1 SEGMENT</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S1</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV AX,S2</span><br><span class="line">MOV SS,AX</span><br><span class="line">LEA SP,TOP</span><br><span class="line"> </span><br><span class="line">;输入小写</span><br><span class="line">L1:</span><br><span class="line">MOV AH,1</span><br><span class="line">INT 21H</span><br><span class="line">CMP AL,&#x27;a&#x27;</span><br><span class="line">JB L1</span><br><span class="line">CMP AL,&#x27;z&#x27;</span><br><span class="line">JA L1</span><br><span class="line">MOV BL,AL</span><br><span class="line"></span><br><span class="line">MOV DL,0DH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DL,0AH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">;变大写输出</span><br><span class="line">MOV DL,BL</span><br><span class="line">SUB DL,20H</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-2编写程序，从键盘接收一个小写字母，然后找出它的前导字符和后续字符，再按顺序显示这三个字符"><a href="#5-2编写程序，从键盘接收一个小写字母，然后找出它的前导字符和后续字符，再按顺序显示这三个字符" class="headerlink" title="5.2编写程序，从键盘接收一个小写字母，然后找出它的前导字符和后续字符，再按顺序显示这三个字符"></a>5.2编写程序，从键盘接收一个小写字母，然后找出它的前导字符和后续字符，再按顺序显示这三个字符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">;5.2接收一个小写字母，然后找出前导字符和后续字符，按顺序输出</span><br><span class="line">S1 SEGMENT</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S1</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV AX,S2</span><br><span class="line">MOV SS,AX</span><br><span class="line">LEA SP,TOP</span><br><span class="line"> </span><br><span class="line">;输入</span><br><span class="line">L0:</span><br><span class="line">MOV AH,1</span><br><span class="line">INT 21H</span><br><span class="line">CMP AL,&#x27;a&#x27;</span><br><span class="line">JB L0</span><br><span class="line">CMP AL,&#x27;z&#x27;</span><br><span class="line">JA L0</span><br><span class="line">MOV BL,AL</span><br><span class="line">DEC BL</span><br><span class="line"></span><br><span class="line">;输出</span><br><span class="line">MOV DL,0DH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DL,0AH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MOV CX,2</span><br><span class="line">MOV DL,BL</span><br><span class="line">L1:</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">ADD DL,2</span><br><span class="line">LOOP L1</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-3将-AX-寄存器中的-16-位数分成-4-组，每组-4-位，然后把这四组数分别放在-AL、BL、CL-和-DL-中"><a href="#5-3将-AX-寄存器中的-16-位数分成-4-组，每组-4-位，然后把这四组数分别放在-AL、BL、CL-和-DL-中" class="headerlink" title="5.3将 AX 寄存器中的 16 位数分成 4 组，每组 4 位，然后把这四组数分别放在 AL、BL、CL 和 DL 中"></a>5.3将 AX 寄存器中的 16 位数分成 4 组，每组 4 位，然后把这四组数分别放在 AL、BL、CL 和 DL 中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">;5.3将AX寄存器的16位数分为四组，每组四位，分别放在AL，BL，CL，DL中</span><br><span class="line">S1 SEGMENT</span><br><span class="line">A1DW0</span><br><span class="line">B1DW0</span><br><span class="line">C1DW0</span><br><span class="line">D1DW0</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S1</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV AX,S2</span><br><span class="line">MOV SS,AX</span><br><span class="line">LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV AX,0ABCDH</span><br><span class="line">MOV CL,4</span><br><span class="line"></span><br><span class="line">ROL AX,CL</span><br><span class="line">MOV BX,AX</span><br><span class="line">AND BX,000FH</span><br><span class="line">MOV SI,BX</span><br><span class="line"></span><br><span class="line">ROL AX,CL</span><br><span class="line">MOV BX,AX</span><br><span class="line">AND BX,000FH</span><br><span class="line">MOV DI,BX</span><br><span class="line"></span><br><span class="line">ROL AX,CL</span><br><span class="line">MOV BX,AX</span><br><span class="line">AND BX,000FH</span><br><span class="line">MOV BP,BX</span><br><span class="line"></span><br><span class="line">ROL AX,CL</span><br><span class="line">MOV BX,AX</span><br><span class="line">AND BX,000FH</span><br><span class="line">MOV DX,BX</span><br><span class="line"></span><br><span class="line">MOV AX,SI</span><br><span class="line">MOV BX,DI</span><br><span class="line">MOV CX,BP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">END MAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">;5.3将AX寄存器的16位数分为四组，每组四位，分别放在AL，BL，CL，DL中</span><br><span class="line">S1 SEGMENT</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S1</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV AX,S2</span><br><span class="line">MOV SS,AX</span><br><span class="line">LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV AX,0ABCDH</span><br><span class="line">PUSH AX</span><br><span class="line"></span><br><span class="line">MOV CL,4</span><br><span class="line">ROL AX,CL</span><br><span class="line">PUSH AX</span><br><span class="line">AND AX,000FH</span><br><span class="line"></span><br><span class="line">POP BX</span><br><span class="line">ROL BX,CL</span><br><span class="line">PUSH BX</span><br><span class="line">AND BX,000FH</span><br><span class="line"></span><br><span class="line">POP CX</span><br><span class="line">SHR CX,1</span><br><span class="line">SHR CX,1</span><br><span class="line">SHR CX,1</span><br><span class="line">SHR CX,1</span><br><span class="line"></span><br><span class="line">SHR CX,1</span><br><span class="line">SHR CX,1</span><br><span class="line">SHR CX,1</span><br><span class="line">SHR CX,1</span><br><span class="line">PUSH CX</span><br><span class="line">AND CX,00F0H</span><br><span class="line"></span><br><span class="line">POP DX</span><br><span class="line">AND DX,000FH</span><br><span class="line">SHR CX,1</span><br><span class="line">SHR CX,1</span><br><span class="line">SHR CX,1</span><br><span class="line">SHR CX,1</span><br><span class="line"></span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-4比较string1和string2所含字符是否相同，相同’MATCH’-不同’NOTMATCH’"><a href="#5-4比较string1和string2所含字符是否相同，相同’MATCH’-不同’NOTMATCH’" class="headerlink" title="5.4比较string1和string2所含字符是否相同，相同’MATCH’,不同’NOTMATCH’"></a>5.4比较string1和string2所含字符是否相同，相同’MATCH’,不同’NOTMATCH’</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">;5.4比较string1和string2所含字符是否相同，相同&#x27;MATCH&#x27;,不同&#x27;NOTMATCH&#x27;</span><br><span class="line">S1 SEGMENT</span><br><span class="line">STRING1 DB &#x27;ABCDEFGH$&#x27;</span><br><span class="line">STRING2 DB &#x27;QQQQQQQQ$&#x27;</span><br><span class="line">MATCHDB &#x27;MATCH$&#x27;</span><br><span class="line">NOTMATCHDB &#x27;NOTMATCH$&#x27;</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 30H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S2</span><br><span class="line">MOV SS,AX</span><br><span class="line">MOV AX,S1</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV ES,AX</span><br><span class="line"></span><br><span class="line">LEA SI,STRING1</span><br><span class="line">LEA DI,STRING2</span><br><span class="line">MOV CX,8</span><br><span class="line"></span><br><span class="line">CLD</span><br><span class="line"></span><br><span class="line">REPNE CMPSB</span><br><span class="line">JNE NO</span><br><span class="line"></span><br><span class="line">YES:</span><br><span class="line">LEA DX,MATCH</span><br><span class="line">MOV AH,09H</span><br><span class="line">INT 21H</span><br><span class="line">JMP EXIT</span><br><span class="line">NO:</span><br><span class="line">LEA DX,NOTMATCH</span><br><span class="line">MOV AH,09H</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">MOV AH,4CH</span><br><span class="line">INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-6将一个含有20个数据的数组M分成两个数组，"><a href="#5-6将一个含有20个数据的数组M分成两个数组，" class="headerlink" title="5.6将一个含有20个数据的数组M分成两个数组，"></a>5.6将一个含有20个数据的数组M分成两个数组，</h3><p>正数组P和负数组N,并分别把两个数组的数据的个数显示出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">;5.6 将一个含有20个数据的数组M分成两个数组，</span><br><span class="line">;正数组P和负数组N,并分别把两个数组的数据的个数显示出来</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    COUNT DB 20</span><br><span class="line">    M DW 1,-2,3,-4,5,-6,7,-8,9,-10,11,-12,13,-14,15,-16,17,-18,19,20</span><br><span class="line">    CNTP DW 0</span><br><span class="line">    P DW 20 DUP(?)</span><br><span class="line">    CNTN DW 0</span><br><span class="line">    N DW 20 DUP(?)</span><br><span class="line">    POST DB 0DH,0AH,&#x27;Positive:$&#x27;</span><br><span class="line">    NEGE DB 0DH,0AH,&#x27;Negative:$&#x27;</span><br><span class="line">    ENT DB 0DH,0AH,&#x27;$&#x27;</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">MOV AX,S2</span><br><span class="line">MOV SS,AX</span><br><span class="line">LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV SI,0</span><br><span class="line">    MOV DI,0</span><br><span class="line">    MOV BP,0</span><br><span class="line">    MOV CX,20</span><br><span class="line">L0: </span><br><span class="line">MOV BX,M[SI]</span><br><span class="line">ADD SI,2</span><br><span class="line">CMP BX,0</span><br><span class="line">JSL2</span><br><span class="line"></span><br><span class="line">;正数</span><br><span class="line">L1: </span><br><span class="line">MOV P[DI],BX</span><br><span class="line">INC CNTP</span><br><span class="line">ADD DI,2</span><br><span class="line">JMP L3</span><br><span class="line"></span><br><span class="line">;负数</span><br><span class="line">L2: </span><br><span class="line">MOV N[BP],BX</span><br><span class="line">INC CNTN</span><br><span class="line">ADD BP,2</span><br><span class="line">JMP L3</span><br><span class="line">L3: </span><br><span class="line">LOOP L0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;AH余数 AL商</span><br><span class="line">MOV AX,CNTP</span><br><span class="line">MOV BL,10</span><br><span class="line">DIV BL</span><br><span class="line">MOV BX,AX</span><br><span class="line">LEA DX,POST</span><br><span class="line">MOV AH,9</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">ADD BL,30H</span><br><span class="line">MOV DL,BL</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">ADD BH,30H</span><br><span class="line">MOV DL,BH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">LEA DX,ENT</span><br><span class="line">MOV AH,9</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MOV AX,CNTN</span><br><span class="line">MOV BL,10</span><br><span class="line">DIV BL</span><br><span class="line">MOV BX,AX</span><br><span class="line">LEA DX,NEGE</span><br><span class="line">MOV AH,9</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">ADD BL,30H</span><br><span class="line">MOV DL,BL</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">ADD BH,30H</span><br><span class="line">MOV DL,BH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-7-求出首地址为-DATA-的-100D-字数组中的最小偶数，并存放在-AX-中"><a href="#5-7-求出首地址为-DATA-的-100D-字数组中的最小偶数，并存放在-AX-中" class="headerlink" title="5.7 求出首地址为 DATA 的 100D 字数组中的最小偶数，并存放在 AX 中"></a>5.7 求出首地址为 DATA 的 100D 字数组中的最小偶数，并存放在 AX 中</h3><p>两次循环 前指针找出偶数放在ax 后指针找出偶数放在dx，假设ax是最小偶数，ax和dx进行比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">;5.7 求出首地址为 DATA 的 100D 字数组中的最小偶数，并存放在 AX 中</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    DATA DW 100D DUP(?)</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV BX,0</span><br><span class="line">    MOV CX,100</span><br><span class="line">    </span><br><span class="line">L0:</span><br><span class="line">MOV AX,DATA[BX]</span><br><span class="line">TEST AX,1</span><br><span class="line">ADD BX,2</span><br><span class="line">LOOPNZ L0;ZF=0和CF&gt;0，继续循环</span><br><span class="line">JNZ EXIT;循环结束且没有偶数</span><br><span class="line">JCXZ EXIT;循环结束且最后一个是偶数，在BX</span><br><span class="line">JZL1;循环未结束，找到偶数 进行比较</span><br><span class="line">L1:</span><br><span class="line">MOV DX,DATA[BX]</span><br><span class="line">TEST DX,1</span><br><span class="line">ADD BX,2</span><br><span class="line">JNZL0</span><br><span class="line">CMP DX,AX</span><br><span class="line">JGEL2;继续向下找更小的偶数</span><br><span class="line">MOV AX,DX;更新最小偶数值</span><br><span class="line">LOOP L0</span><br><span class="line">L2:</span><br><span class="line">LOOP L1</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-8-把-AX-中存放的-16-位二进制数-K-看作是-8-个二进制的“四分之一字节”"><a href="#5-8-把-AX-中存放的-16-位二进制数-K-看作是-8-个二进制的“四分之一字节”" class="headerlink" title="5.8 把 AX 中存放的 16 位二进制数 K 看作是 8 个二进制的“四分之一字节”"></a>5.8 把 AX 中存放的 16 位二进制数 K 看作是 8 个二进制的“四分之一字节”</h3><h3 id="数一下值为-3-即-11B-的四分之一的字节数，并将该数在终端上显示出来。"><a href="#数一下值为-3-即-11B-的四分之一的字节数，并将该数在终端上显示出来。" class="headerlink" title="数一下值为 3(即 11B)的四分之一的字节数，并将该数在终端上显示出来。"></a>数一下值为 3(即 11B)的四分之一的字节数，并将该数在终端上显示出来。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">;5.8 把 AX 中存放的 16 位二进制数 K 看作是 8 个二进制的“四分之一字节”。</span><br><span class="line">;数一下值为 3(即 11B)的四分之一字节数，并将该数在终端上显示出来。</span><br><span class="line">S1 SEGMENT</span><br><span class="line">K DW 6C3BH</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line">    </span><br><span class="line">    MOV AX,K</span><br><span class="line">    MOV BP,8;循环次数</span><br><span class="line">    MOV CL,2;循环位数</span><br><span class="line">    XOR DX,DX;11B的个数</span><br><span class="line">    </span><br><span class="line">L0:</span><br><span class="line">CMP BP,0</span><br><span class="line">JEEXIT</span><br><span class="line">DEC BP</span><br><span class="line"></span><br><span class="line">ROL AX,CL</span><br><span class="line">MOV BX,AX</span><br><span class="line">AND BX,3</span><br><span class="line">CMP BX,3</span><br><span class="line"></span><br><span class="line">JEL1</span><br><span class="line">JNE L0</span><br><span class="line"></span><br><span class="line">L1:</span><br><span class="line">INC DX</span><br><span class="line">JMP L0</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">ADD DL,30H</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">    </span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-9输入一个四位的-16-进制数，并在终端上显示等值的二进制数"><a href="#5-9输入一个四位的-16-进制数，并在终端上显示等值的二进制数" class="headerlink" title="5.9输入一个四位的 16 进制数，并在终端上显示等值的二进制数"></a>5.9输入一个四位的 16 进制数，并在终端上显示等值的二进制数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">;5.9 输入一个四位的 16 进制数，并在终端上显示等值的二进制数。</span><br><span class="line">S1 SEGMENT</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">MOV AX,S1</span><br><span class="line">MOV DS,AX</span><br><span class="line">MOV AX,S2</span><br><span class="line">MOV SS,AX</span><br><span class="line">LEA SP,TOP</span><br><span class="line"></span><br><span class="line">;输入</span><br><span class="line">MOV BX,0</span><br><span class="line">MOV CX,4</span><br><span class="line">L0:</span><br><span class="line">PUSH CX</span><br><span class="line">MOV CL,4</span><br><span class="line">ROL BX,CL</span><br><span class="line">MOV AH,1</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">;NUMBER</span><br><span class="line">CMP AL,30H</span><br><span class="line">JBL0</span><br><span class="line">CMP AL,39H</span><br><span class="line">JAL1</span><br><span class="line">SUB AL,30H</span><br><span class="line">JMP L3</span><br><span class="line"></span><br><span class="line">L1:;APHAL</span><br><span class="line">CMP AL,41H</span><br><span class="line">JBL0</span><br><span class="line">CMP AL,46H</span><br><span class="line">JAL2</span><br><span class="line">SUB AL,37H</span><br><span class="line">JMP L3</span><br><span class="line"></span><br><span class="line">L2:;SMALL A</span><br><span class="line">CMP AL,61H</span><br><span class="line">JBL0</span><br><span class="line">CMP AL,66H</span><br><span class="line">JAL0</span><br><span class="line">SUB AL,57H</span><br><span class="line">JMP L3</span><br><span class="line"></span><br><span class="line">L3:</span><br><span class="line">ADD BL,AL</span><br><span class="line">POP CX</span><br><span class="line">LOOP L0</span><br><span class="line"></span><br><span class="line">MOV DL,0DH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DL,0AH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MOV CX,16</span><br><span class="line">L4:</span><br><span class="line">MOV DL,30H</span><br><span class="line">ROL BX,1</span><br><span class="line">ADC DL,0</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">LOOP L4</span><br><span class="line"></span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-10设有一段英文，其字符变量名为-ENG，并以-字符结束。试编写一程序，查对单词-SUN在该文中的出现次数，并以格式“SUN：xxxx”显示出次数。"><a href="#5-10设有一段英文，其字符变量名为-ENG，并以-字符结束。试编写一程序，查对单词-SUN在该文中的出现次数，并以格式“SUN：xxxx”显示出次数。" class="headerlink" title="5.10设有一段英文，其字符变量名为 ENG，并以$字符结束。试编写一程序，查对单词 SUN在该文中的出现次数，并以格式“SUN：xxxx”显示出次数。"></a>5.10设有一段英文，其字符变量名为 ENG，并以$字符结束。试编写一程序，查对单词 SUN在该文中的出现次数，并以格式“SUN：xxxx”显示出次数。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">;5.10 一段英文 名ENG，以$结束,计算SUN在该文中出现的字数，格式SUNXXXX显示出次数</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    ENG DB &#x27;SUNSSUN;;SUN S,,,SUN$&#x27;</span><br><span class="line">PUT DB &#x27;SUN&#x27;</span><br><span class="line"></span><br><span class="line">COUNT DB &#x27;0000&#x27;,0DH,0AH,&#x27;$&#x27;</span><br><span class="line">SUN DB &#x27;SUN&#x27;</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV ES,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line">    </span><br><span class="line">    XOR AX,AX</span><br><span class="line">    MOV DX,PUT-ENG-2</span><br><span class="line">    CALL CMPSTR</span><br><span class="line">    CALL CHANGE</span><br><span class="line">    </span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line"></span><br><span class="line">CMPSTR PROC NEAR</span><br><span class="line">L1:</span><br><span class="line">    MOV DI,BX</span><br><span class="line">    LEA SI,SUN</span><br><span class="line">    </span><br><span class="line">    MOV CX,3</span><br><span class="line">    REPE CMPSB</span><br><span class="line">    JNZ L2</span><br><span class="line">    INC AX</span><br><span class="line">    ADD BX,2 ;匹配成功</span><br><span class="line">    SUB DX,2</span><br><span class="line">L2:</span><br><span class="line">INC BX ;匹配下一个</span><br><span class="line">DEC DX</span><br><span class="line">CMP DX,0</span><br><span class="line">JG L1</span><br><span class="line"></span><br><span class="line">CMPSTR ENDP</span><br><span class="line"></span><br><span class="line">CHANGE PROC NEAR</span><br><span class="line">L3:</span><br><span class="line">MOV CH,4 </span><br><span class="line">MOV CL,4</span><br><span class="line">LEA BX,COUNT </span><br><span class="line">L4: </span><br><span class="line">ROL AX,CL</span><br><span class="line">MOV DX,AX</span><br><span class="line">AND DL,0FH ;取一位16进制数</span><br><span class="line">ADD DL,30H</span><br><span class="line">CMP DL,39H</span><br><span class="line">JLE L5</span><br><span class="line">ADD DL,07H</span><br><span class="line">L5: </span><br><span class="line">MOV [BX],DL</span><br><span class="line">INC BX</span><br><span class="line">DEC CH</span><br><span class="line">JNZ L4</span><br><span class="line"></span><br><span class="line"> LEA DX,PUT</span><br><span class="line"> MOV AH,09H</span><br><span class="line">INT 21H</span><br><span class="line">CHANGE ENDP</span><br><span class="line"></span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-11从键盘输入一系列以-为结束符的字符串，对其中非数字字符计数，并显示计数结果。"><a href="#5-11从键盘输入一系列以-为结束符的字符串，对其中非数字字符计数，并显示计数结果。" class="headerlink" title="5.11从键盘输入一系列以$为结束符的字符串，对其中非数字字符计数，并显示计数结果。"></a>5.11从键盘输入一系列以$为结束符的字符串，对其中<u>非数字字符</u>计数，并显示计数结果。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">;从键盘输入一系列以$为结束符的字符串，</span><br><span class="line">;对其中的非数字字符计数，并显示出计数结果。</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    STRING DB 100 DUP(?)</span><br><span class="line">    CNT DW 0</span><br><span class="line">    DISPLAY DB 0DH,0AH,&#x27;THE COUNT:$&#x27;</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line">   </span><br><span class="line">    LEA BX,STRING</span><br><span class="line">L1:</span><br><span class="line">MOV AH,1;输入</span><br><span class="line">INT 21H</span><br><span class="line">MOV [BX],AL</span><br><span class="line">INC BX</span><br><span class="line">CMP AL,&#x27;$&#x27;;结束?</span><br><span class="line">JEL3</span><br><span class="line">CMP AL,30H;0-9</span><br><span class="line">JBL2</span><br><span class="line">CMP AL,39H</span><br><span class="line">JAL2</span><br><span class="line">JMP L1</span><br><span class="line"></span><br><span class="line">L2:</span><br><span class="line">INC CNT</span><br><span class="line">JMP L1</span><br><span class="line"></span><br><span class="line">L3:</span><br><span class="line">;转成十进制</span><br><span class="line">MOV AX,CNT</span><br><span class="line">MOV BL,10</span><br><span class="line">DIV BL</span><br><span class="line">MOV BX,AX</span><br><span class="line"></span><br><span class="line">LEA DX,DISPLAY</span><br><span class="line">MOV AH,9</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">;BX放到DX</span><br><span class="line">MOV DL,30H</span><br><span class="line">ADD DL,BL</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MOV DL,30H</span><br><span class="line">ADD DL,BH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MOV DL,0DH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DL,0AH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">EXIT:   </span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-12-首地址为-MEM-的-100D-字数组，删除数组中所有为-0-的项，并将后续项向前压缩，最后将数组的剩余部分补上-0"><a href="#5-12-首地址为-MEM-的-100D-字数组，删除数组中所有为-0-的项，并将后续项向前压缩，最后将数组的剩余部分补上-0" class="headerlink" title="5.12 首地址为 MEM 的 100D 字数组，删除数组中所有为 0 的项，并将后续项向前压缩，最后将数组的剩余部分补上 0"></a>5.12 首地址为 MEM 的 100D 字数组，删除数组中所有为 0 的项，并将后续项向前压缩，最后将数组的剩余部分补上 0</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">;5.12 首地址为 MEM 的 100D 字数组，删除数组中所有为 0 的项，</span><br><span class="line">;并将后续项向前压缩，最后将数组的剩余部分补上 0。</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    MEM DW 1,0,0,0,0,0,0,0,0,0</span><br><span class="line">    DW 2,1,0,3,4,5,6,7,8,9</span><br><span class="line">    DW 3,0,0,0,0,0,0,0,0,0</span><br><span class="line">    DW 4,1,2,0,4,5,6,7,8,9</span><br><span class="line">    DW 5,0,0,0,0,0,0,0,0,0</span><br><span class="line">    DW 6,1,2,3,4,5,0,7,8,9</span><br><span class="line">    DW 7,0,0,0,0,0,0,0,0,0</span><br><span class="line">    DW 8,1,2,3,4,5,6,7,0,9</span><br><span class="line">    DW 9,0,0,0,0,0,0,0,0,0</span><br><span class="line">    DW 0,1,2,3,4,5,6,7,8,0</span><br><span class="line">    CNT DW 0</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV CX,100</span><br><span class="line">MOV SI,0</span><br><span class="line">L0:</span><br><span class="line">CMP CX,0</span><br><span class="line">JEL3</span><br><span class="line"></span><br><span class="line">MOV AX,MEM[SI]</span><br><span class="line">MOV DI,SI</span><br><span class="line">ADD SI,2</span><br><span class="line">DEC CX</span><br><span class="line">CMP AX,0</span><br><span class="line">JNEL0</span><br><span class="line"></span><br><span class="line">;把后面的前移</span><br><span class="line">L1:</span><br><span class="line">INC CNT;记录数组中0的个数</span><br><span class="line">MOV DX,MEM[SI]</span><br><span class="line">MOV MEM[DI],DX;DX是中间量</span><br><span class="line">JMP L0</span><br><span class="line"></span><br><span class="line">;剩余部分补零</span><br><span class="line">MOV CX,CNT</span><br><span class="line">L3:</span><br><span class="line">MOV SI,198</span><br><span class="line">MOV MEM[SI],0</span><br><span class="line">SUB SI,2</span><br><span class="line">LOOP L3</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-13在-STRING-到-STRING-99-单元中存放着一个字符串"><a href="#5-13在-STRING-到-STRING-99-单元中存放着一个字符串" class="headerlink" title="5.13在 STRING 到 STRING+99 单元中存放着一个字符串"></a>5.13在 STRING 到 STRING+99 单元中存放着一个字符串</h3><p>测试该字符串中是否存在数字，如有则把 CL 的第 5 位置 1，否则将该位置 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">;在 STRING 到 STRING+99 单元中存放着一个字符串</span><br><span class="line">;测试该字符串中是否存在数字，如有则把 CL 的第 5 位置 1，否则将该位置 0。</span><br><span class="line">S1 SEGMENT</span><br><span class="line">STRING DB &#x27;HELLOABCDE1&#x27;,90 DUP(&#x27;A&#x27;) </span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line">   </span><br><span class="line">MOV CX,100</span><br><span class="line">LEA BX,STRING </span><br><span class="line">L0:</span><br><span class="line">MOV AL,[BX]</span><br><span class="line">INC BX</span><br><span class="line">    CMP AL,30H</span><br><span class="line">    JBL1</span><br><span class="line">    CMP AL,39H</span><br><span class="line">    JNAL2</span><br><span class="line">L1:</span><br><span class="line">LOOP L0</span><br><span class="line"></span><br><span class="line">;存在数字</span><br><span class="line">L2:</span><br><span class="line">MOV CL,00010000b</span><br><span class="line">JMP EXIT</span><br><span class="line">  </span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-14"><a href="#5-14" class="headerlink" title="5.14"></a>5.14</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">;5.14 在首地址为 TABLE 的数组中按递增次序存放着 100H 个 16 位补码数</span><br><span class="line">;把出现次数最多的数及其出现次数分别存放于 AX 和 CX 中</span><br><span class="line">S1 SEGMENT</span><br><span class="line">TABELDW6 DUP(-1),10 DUP(1),25 DUP(2),15 DUP(3),200 DUP(4)</span><br><span class="line">TEMPDW?</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME CS:S3,DS:S1,SS:S2</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line">    </span><br><span class="line">    MOV CX,128</span><br><span class="line">    MOV SI,0;第二组的个数</span><br><span class="line">    MOV DI,0;第一组的个数</span><br><span class="line">    MOV DX,0;出现次数最大的值</span><br><span class="line">    LEA BX,TABEL</span><br><span class="line">MOV DX,[BX]</span><br><span class="line">    </span><br><span class="line">;一段一段记录个数，相等增加个数，大于则记录下一组，比较存储两组个数，再进行下一轮</span><br><span class="line">L1:</span><br><span class="line">CMP CX,0</span><br><span class="line">JEEXIT</span><br><span class="line">DEC CX</span><br><span class="line"></span><br><span class="line">;后边组的个数是DI   后指针</span><br><span class="line">MOV AX,[BX]</span><br><span class="line">ADD BX,2</span><br><span class="line">INC DI</span><br><span class="line">CMPAX,[BX]</span><br><span class="line">JNE L2</span><br><span class="line"></span><br><span class="line">CMP CX,0</span><br><span class="line">JNEL1</span><br><span class="line"></span><br><span class="line">L2:</span><br><span class="line">CMP DI,SI</span><br><span class="line">JBL3;不用变动</span><br><span class="line">;后边组的次数更多，需要更新</span><br><span class="line">MOV DX,AX;DX保存数值较大值</span><br><span class="line">MOV SI,DI;SI保存次数较大值</span><br><span class="line"></span><br><span class="line">L3:</span><br><span class="line">XORDI,DI</span><br><span class="line">JMP L1</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">MOV CX,SI</span><br><span class="line"></span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-15-数据段中已定义了一个有-n-个字数据的数组-M-求出-M-中绝对值最大的数，放在数据段的-M-2n-单元中-最后一个单元-并将该数的偏移地址存放在-M-2-n-1-单元中"><a href="#5-15-数据段中已定义了一个有-n-个字数据的数组-M-求出-M-中绝对值最大的数，放在数据段的-M-2n-单元中-最后一个单元-并将该数的偏移地址存放在-M-2-n-1-单元中" class="headerlink" title="5.15 数据段中已定义了一个有 n 个字数据的数组 M,求出 M 中绝对值最大的数，放在数据段的 M+2n 单元中(最后一个单元),并将该数的偏移地址存放在 M+2(n+1)单元中"></a>5.15 数据段中已定义了一个有 n 个<u>字</u>数据的数组 M,求出 M 中绝对值最大的数，放在数据段的 M+2n 单元中(最后一个单元),并将该数的偏移地址存放在 M+2(n+1)单元中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">;5.15 数据段中已定义了一个有 n 个字数据的数组 M，</span><br><span class="line">;求出 M 中绝对值最大的数，放在数据段的 M+2n 单元中</span><br><span class="line">;并将该数的偏移地址存放在 M+2(n+1)单元中</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    M DW 10 DUP(5),10 DUP(2),5 DUP(-10)</span><br><span class="line">    CNTDW($-M)/2</span><br><span class="line">    MAXDW?</span><br><span class="line">    ADDRESS DW ?</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">;第一次</span><br><span class="line">MOV SI,0</span><br><span class="line">MOV AX,M[SI]</span><br><span class="line">ADD SI,2</span><br><span class="line">CMP AX,0</span><br><span class="line">JGEL0</span><br><span class="line">NEG AX</span><br><span class="line">L0:</span><br><span class="line">MOV MAX,AX</span><br><span class="line">MOV BX,SI</span><br><span class="line"></span><br><span class="line">;N-1次循环比较</span><br><span class="line">MOV CX,CNT</span><br><span class="line">DEC CX </span><br><span class="line">L1:</span><br><span class="line">CMP CX,0</span><br><span class="line">JEL3</span><br><span class="line">MOV AX,M[SI]</span><br><span class="line">ADD SI,2</span><br><span class="line">DEC CX</span><br><span class="line">CMP AX,0</span><br><span class="line">JGEL2</span><br><span class="line">NEG AX</span><br><span class="line"></span><br><span class="line">L2:</span><br><span class="line">CMP MAX,AX</span><br><span class="line">JAE L1</span><br><span class="line">;出现绝对值更大的数，需更新</span><br><span class="line">MOV MAX,AX</span><br><span class="line">MOV BX,SI</span><br><span class="line">JMP L1</span><br><span class="line"></span><br><span class="line">;存放数据</span><br><span class="line">L3:</span><br><span class="line">ADD SI,2</span><br><span class="line">MOV DX,M[BX]</span><br><span class="line">MOV M[SI],DX</span><br><span class="line">ADD SI,2</span><br><span class="line">MOV M[SI],BX</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-16在首地址为-DATA-的字数组中存放着-100H-个-16-位补码数"><a href="#5-16在首地址为-DATA-的字数组中存放着-100H-个-16-位补码数" class="headerlink" title="5.16在首地址为 DATA 的字数组中存放着 100H 个 16 位补码数"></a>5.16在首地址为 DATA 的字数组中存放着 100H 个 16 位补码数</h3><p>求出它们的平均值放在 AX 寄存器中,并求出数组中有多少个数小于此平均值，将结果放在 BX 寄存 器中。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">;5.16 在首地址为 DATA 的字数组中存放着 100H 个 16 位补码数</span><br><span class="line">;求出它们的平均值放在 AX 寄存器中；</span><br><span class="line">;并求出数组中有多少个数小于此平均值，将结果放在 BX 寄存 器中。 </span><br><span class="line">S1 SEGMENT</span><br><span class="line">    DATA DW3 DUP(-1),4 DUP(1),25 DUP(2),15 DUP(3),200 DUP(4)</span><br><span class="line">    AVER DW ?</span><br><span class="line">    CNTDW0</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV CX,128</span><br><span class="line">MOV AX,0</span><br><span class="line">MOV SI,0</span><br><span class="line">L0:</span><br><span class="line">MOV DX,DATA[SI]</span><br><span class="line">ADD SI,2</span><br><span class="line">ADD AX,DX;AX作SUM</span><br><span class="line">LOOP L0</span><br><span class="line"></span><br><span class="line">MOV BP,100H</span><br><span class="line">DIV BP</span><br><span class="line">MOV AH,0</span><br><span class="line">MOV AVER,AX</span><br><span class="line"></span><br><span class="line">;遍历比较</span><br><span class="line">MOV SI,0</span><br><span class="line">MOV CX,128</span><br><span class="line">L1: </span><br><span class="line">MOV DX,DATA[SI]</span><br><span class="line">ADD SI,2</span><br><span class="line">CMP DX,AVER</span><br><span class="line">JAE L2</span><br><span class="line">INC CNT</span><br><span class="line">L2:</span><br><span class="line">LOOP L1</span><br><span class="line"></span><br><span class="line">MOV BX,CNT</span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-17把-AX-中的-16-进制数转换为-ASCII-码-并将对应的-ASCII-码依次存放到-MEM-数组中的四个字节中"><a href="#5-17把-AX-中的-16-进制数转换为-ASCII-码-并将对应的-ASCII-码依次存放到-MEM-数组中的四个字节中" class="headerlink" title="5.17把 AX 中的 16 进制数转换为 ASCII 码,并将对应的 ASCII 码依次存放到 MEM 数组中的四个字节中"></a>5.17把 AX 中的 16 进制数转换为 ASCII 码,并将对应的 ASCII 码依次存放到 MEM 数组中的四个字节中</h3><p>例如，当(AX)=2A49H 时，MEM 中的 4 个字节为39H，34H，41H，32H</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">;5.17 试编制一个程序把 AX 中的 16 进制数转换为 ASCII 码</span><br><span class="line">;并将对应的 ASCII 码依次存放到 MEM 数组中的四个字节中</span><br><span class="line">;例如，当(AX)=2A49H 时，MEM 中的 4 个字节为39H，34H，41H，32H</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    MEM DB 4 DUP(?)</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV AX,2A49H</span><br><span class="line">MOV CX,4</span><br><span class="line">MOV SI,3</span><br><span class="line">L0:</span><br><span class="line">PUSH CX</span><br><span class="line">MOV CL,4</span><br><span class="line">ROL AX,CL</span><br><span class="line">MOV DX,AX</span><br><span class="line">AND DX,0FH</span><br><span class="line">ADD DX,30H</span><br><span class="line">CMP DX,3AH</span><br><span class="line">JBL1</span><br><span class="line">ADD DX,7</span><br><span class="line"></span><br><span class="line">;存放数据</span><br><span class="line">L1:</span><br><span class="line">MOV MEM[SI],DL</span><br><span class="line">DEC SI</span><br><span class="line">POP CX</span><br><span class="line">LOOP L0</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-18把-0-100D-之间的-30-个数存入以-GRADE-为首地址的-30-字数组中"><a href="#5-18把-0-100D-之间的-30-个数存入以-GRADE-为首地址的-30-字数组中" class="headerlink" title="5.18把 0~100D 之间的 30 个数存入以 GRADE 为首地址的 30 字数组中"></a>5.18把 0~100D 之间的 30 个数存入以 GRADE 为首地址的 30 字数组中</h3><p>GRADE+i 表示学号为 i+1 的学生的成绩<br>数组 RANK 为 30 个学生的名次表<br>RANK+i 的内容是学号为 i+1 的学生的名次<br>根据 GRADE 中的学生成绩，将学生名次填入 RANK数组中<br>(提示：一个学生的名次等于成绩高于这个学生的人数加 1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">;5.18 把 0~100D 之间的 30 个数存入以 GRADE 为首地址的 30 字数组中</span><br><span class="line">;GRADE+i 表示学号为 i+1 的学生的成绩</span><br><span class="line">;数组 RANK 为 30 个学生的名次表</span><br><span class="line">;RANK+i 的内容是学号为 i+1 的学生的名次</span><br><span class="line">;根据 GRADE 中的学生成绩，将学生名次填入 RANK数组中</span><br><span class="line">;(提示：一个学生的名次等于成绩高于这个学生的人数加 1。</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    GRADE DW 13 DUP(90),4 DUP(80),5 DUP(70),2 DUP(60),0064H,6 DUP(95)</span><br><span class="line">    NUM DW 0</span><br><span class="line">    RANK DW 30 DUP(?)</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV SI,0</span><br><span class="line">MOV DI,0</span><br><span class="line">MOV CX,30</span><br><span class="line">L0:</span><br><span class="line">MOV AX,GRADE[SI]</span><br><span class="line">ADD SI,2</span><br><span class="line">MOV DI,0</span><br><span class="line">MOV NUM,0</span><br><span class="line"></span><br><span class="line">L1:</span><br><span class="line">CMP DI,30</span><br><span class="line">JEL3</span><br><span class="line">MOV BX,GRADE[DI]</span><br><span class="line">ADD DI,2</span><br><span class="line">CMP AX,BX</span><br><span class="line">JAL2</span><br><span class="line">JMP L1</span><br><span class="line">L2:</span><br><span class="line">INC NUM</span><br><span class="line">JMP L1</span><br><span class="line"></span><br><span class="line">L3:</span><br><span class="line">MOV DX,NUM</span><br><span class="line">MOV RANK[SI],DX</span><br><span class="line">LOOP L0</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-19-已知数组-A-包含-15-个互不相等的整数，数组-B-包含-20-个互不相等的整数"><a href="#5-19-已知数组-A-包含-15-个互不相等的整数，数组-B-包含-20-个互不相等的整数" class="headerlink" title="5.19 已知数组 A 包含 15 个互不相等的整数，数组 B 包含 20 个互不相等的整数"></a>5.19 已知数组 A 包含 15 个互不相等的整数，数组 B 包含 20 个互不相等的整数</h3><h3 id="把既在-A-中又在-B-中出现的整数存放于数组-C-中"><a href="#把既在-A-中又在-B-中出现的整数存放于数组-C-中" class="headerlink" title="把既在 A 中又在 B 中出现的整数存放于数组 C 中"></a>把既在 A 中又在 B 中出现的整数存放于数组 C 中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">;5.19 已知数组 A 包含 15 个互不相等的整数，数组 B 包含 20 个互不相等的整数</span><br><span class="line">;把既在 A 中又在 B 中出现的整数存放于数组 C 中</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    ARRYADB0,1,2,3,4,5,6,7,8,9,10,11,12,13,14</span><br><span class="line">    ARRYBDB5,6,7,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29</span><br><span class="line">    ARRYCDB15 DUP(?)</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">MOV SI,0</span><br><span class="line">MOV BX,0</span><br><span class="line">MOV CX,15</span><br><span class="line">;外循环</span><br><span class="line">L0:</span><br><span class="line">PUSH CX</span><br><span class="line">MOV CX,20</span><br><span class="line"></span><br><span class="line">MOV AL,ARRYA[SI]</span><br><span class="line">INC SI</span><br><span class="line"></span><br><span class="line">;内循环</span><br><span class="line">MOV DI,0</span><br><span class="line">L1:</span><br><span class="line">CMP ARRYB[DI],AL</span><br><span class="line">INC DI</span><br><span class="line">JE L2</span><br><span class="line">LOOP L1;接着比较</span><br><span class="line"></span><br><span class="line">L2:</span><br><span class="line">MOV ARRYC[BX],AL</span><br><span class="line">INC BX</span><br><span class="line"></span><br><span class="line">POP CX</span><br><span class="line">LOOP L0</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-20-设在-A、B-和-C-单元中分别存放着三个数。"><a href="#5-20-设在-A、B-和-C-单元中分别存放着三个数。" class="headerlink" title="5.20 设在 A、B 和 C 单元中分别存放着三个数。"></a>5.20 设在 A、B 和 C 单元中分别存放着三个数。</h3><h3 id="若三个数都不是-0，则求出三数之和存放在D-单元中"><a href="#若三个数都不是-0，则求出三数之和存放在D-单元中" class="headerlink" title="若三个数都不是 0，则求出三数之和存放在D 单元中"></a>若三个数都不是 0，则求出三数之和存放在D 单元中</h3><h3 id="若其中有一个数为-0，则把其它两单元也清-0"><a href="#若其中有一个数为-0，则把其它两单元也清-0" class="headerlink" title="若其中有一个数为 0，则把其它两单元也清 0"></a>若其中有一个数为 0，则把其它两单元也清 0</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">;5.20 设在 A、B 和 C 单元中分别存放着三个数。</span><br><span class="line">;若三个数都不是 0，则求出三数之和存放在D 单元中</span><br><span class="line">;若其中有一个数为 0，则把其它两单元也清 0</span><br><span class="line"></span><br><span class="line">S1 SEGMENT</span><br><span class="line">    NUMADW10</span><br><span class="line">NUMBDW0</span><br><span class="line">    NUMCDW0</span><br><span class="line">    NUMDDW0</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">XOR DX,DX</span><br><span class="line">MOV AX,NUMA</span><br><span class="line">CMP AX,0</span><br><span class="line">JE  L1</span><br><span class="line">ADD DX,AX</span><br><span class="line"></span><br><span class="line">MOV AX,NUMB</span><br><span class="line">CMP AX,0</span><br><span class="line">JE  L1</span><br><span class="line">ADD DX,AX</span><br><span class="line"></span><br><span class="line">MOV AX,NUMC</span><br><span class="line">CMP AX,0</span><br><span class="line">JE  L1</span><br><span class="line">ADD DX,AX</span><br><span class="line">JMP L2</span><br><span class="line"></span><br><span class="line">;清零</span><br><span class="line">L1:</span><br><span class="line">MOV BX,0</span><br><span class="line">LEA SI,NUMA</span><br><span class="line">MOV [SI],BX</span><br><span class="line">LEA SI,NUMB</span><br><span class="line">MOV [SI],BX</span><br><span class="line">LEA SI,NUMC</span><br><span class="line">MOV [SI],BX</span><br><span class="line">JMP EXIT</span><br><span class="line"></span><br><span class="line">L2:</span><br><span class="line">LEA DI,NUMD</span><br><span class="line">MOV DX,[DI]</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-21比较数组-ARRAY-中的三个-16-位补码数，并根据比较结果在终端上显示如下信息："><a href="#5-21比较数组-ARRAY-中的三个-16-位补码数，并根据比较结果在终端上显示如下信息：" class="headerlink" title="5.21比较数组 ARRAY 中的三个 16 位补码数，并根据比较结果在终端上显示如下信息："></a>5.21比较数组 ARRAY 中的三个 16 位补码数，并根据比较结果在终端上显示如下信息：</h3><h3 id="1-如果三个数都不相等则显示-0；"><a href="#1-如果三个数都不相等则显示-0；" class="headerlink" title="(1) 如果三个数都不相等则显示 0；"></a>(1) 如果三个数都不相等则显示 0；</h3><h3 id="2-如果三个数有二个数相等则显示-1；"><a href="#2-如果三个数有二个数相等则显示-1；" class="headerlink" title="(2) 如果三个数有二个数相等则显示 1；"></a>(2) 如果三个数有二个数相等则显示 1；</h3><h3 id="3-如果三个数都相等则显示-2"><a href="#3-如果三个数都相等则显示-2" class="headerlink" title="(3) 如果三个数都相等则显示 2"></a>(3) 如果三个数都相等则显示 2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">;5.21比较数组 ARRAY 中的三个 16 位补码数，并根据比较结果在终端上显示如下信息：</span><br><span class="line">;(1) 如果三个数都不相等则显示 0；</span><br><span class="line">;(2) 如果三个数有二个数相等则显示 1；</span><br><span class="line">;(3) 如果三个数都相等则显示 2</span><br><span class="line"></span><br><span class="line">S1 SEGMENT</span><br><span class="line">    ARRAYDW1,2,1</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">LEA SI,ARRAY</span><br><span class="line">MOV AX,[SI]</span><br><span class="line">ADD SI,2</span><br><span class="line">MOV BX,[SI]</span><br><span class="line">ADD SI,2</span><br><span class="line">MOV DX,[SI]</span><br><span class="line">CMP AX,BX</span><br><span class="line">JE  L1</span><br><span class="line">JNE L2</span><br><span class="line"></span><br><span class="line">;A=B</span><br><span class="line">L1:</span><br><span class="line">CMP BX,DX</span><br><span class="line">JEL3</span><br><span class="line">JNE L4</span><br><span class="line"></span><br><span class="line">;A≠B</span><br><span class="line">L2:</span><br><span class="line">CMP BX,DX</span><br><span class="line">JEL4</span><br><span class="line">CMP AX,DX</span><br><span class="line">JEL4</span><br><span class="line">JNE L5</span><br><span class="line"></span><br><span class="line">;ALL OK</span><br><span class="line">L3:</span><br><span class="line">MOV DL,32H</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">JMP EXIT</span><br><span class="line"></span><br><span class="line">;JUST ONE</span><br><span class="line">L4:</span><br><span class="line">MOV DL,31H</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">JMP EXIT</span><br><span class="line"></span><br><span class="line">;ALL NOT</span><br><span class="line">L5:</span><br><span class="line">MOV DL,30H</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">JMP EXIT</span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-22-从键盘输入一系列字符-以回车符结束-，并按字母、数字、及其它字符分类计数，最后显示出这三类的计数结果-OK"><a href="#5-22-从键盘输入一系列字符-以回车符结束-，并按字母、数字、及其它字符分类计数，最后显示出这三类的计数结果-OK" class="headerlink" title="5.22 从键盘输入一系列字符(以回车符结束)，并按字母、数字、及其它字符分类计数，最后显示出这三类的计数结果 OK"></a>5.22 从键盘输入一系列字符(以回车符结束)，并按字母、数字、及其它字符分类计数，最后显示出这三类的计数结果 OK</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">;从键盘输入一系列字符(以回车符结束)，并按字母、数字、及其它字符分类计数，</span><br><span class="line">;最后显示出这三类的计数结果</span><br><span class="line">S1 SEGMENT</span><br><span class="line">BUFFDB 250,?,250 DUP(?)</span><br><span class="line">    CNTADW0</span><br><span class="line">    CNTNDW0</span><br><span class="line">    CNTODW0</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">LEA DX,BUFF</span><br><span class="line">MOVAH,0AH</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MOVSI,1</span><br><span class="line">XOR CH,CH</span><br><span class="line">MOV CL,BUFF[SI]</span><br><span class="line">L0:</span><br><span class="line">INC SI</span><br><span class="line">MOV AL,BUFF[SI]</span><br><span class="line">CMP AL,30H</span><br><span class="line">JBL3</span><br><span class="line">CMP AL,3AH</span><br><span class="line">JBL2</span><br><span class="line">CMP AL,41H</span><br><span class="line">JBL3</span><br><span class="line">CMP AL,5AH</span><br><span class="line">JBL1</span><br><span class="line">CMP AL,61H</span><br><span class="line">JBL3</span><br><span class="line">CMP AL,7AH</span><br><span class="line">JBL1</span><br><span class="line"></span><br><span class="line">L1:</span><br><span class="line">INC CNTA</span><br><span class="line">MOV BX,CNTA</span><br><span class="line">LOOP L0</span><br><span class="line">L2:</span><br><span class="line">INC CNTN</span><br><span class="line">MOV DX,CNTN</span><br><span class="line">LOOP L0</span><br><span class="line">L3:</span><br><span class="line">INC CNTO</span><br><span class="line">MOV DI,CNTO</span><br><span class="line">LOOP L0</span><br><span class="line"></span><br><span class="line">MOV DX,0DH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DX,0AH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DX,CNTA</span><br><span class="line">MOV AH,2</span><br><span class="line">ADD DX,30H</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MOV DX,CNTN</span><br><span class="line">ADD DX,30H</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DX,0DH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DX,0AH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line"></span><br><span class="line">MOV DX,CNTO</span><br><span class="line">ADD DX,30H</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DX,0DH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">MOV DX,0AH</span><br><span class="line">MOV AH,2</span><br><span class="line">INT 21H</span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure><h3 id="5-23-已定义了两个整数变量-A-和-B，试编写程序完成下列功能："><a href="#5-23-已定义了两个整数变量-A-和-B，试编写程序完成下列功能：" class="headerlink" title="5.23 已定义了两个整数变量 A 和 B，试编写程序完成下列功能："></a>5.23 已定义了两个整数变量 A 和 B，试编写程序完成下列功能：</h3><p>(1) 若两个数中有一个是奇数，则将奇数存入 A 中，偶数存入 B 中；</p><p>(2) 若两个数中均为奇数，则将两数加 1 后存回原变量；</p><p>(3) 若两个数中均为偶数，则两个变量均不改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">;5.23 已定义了两个整数变量 A 和 B</span><br><span class="line">;(1) 若两个数中有一个是奇数，则将奇数存入 A 中，偶数存入 B 中；</span><br><span class="line">;(2) 若两个数中均为奇数，则将两数加 1 后存回原变量；</span><br><span class="line">;(3) 若两个数中均为偶数，则两个变量均不改变。</span><br><span class="line">S1 SEGMENT</span><br><span class="line">    NUMADW2A32H</span><br><span class="line">    NUMBDW2A31H</span><br><span class="line">S1 ENDS</span><br><span class="line"></span><br><span class="line">S2 SEGMENT</span><br><span class="line">    DW 100H DUP(?)</span><br><span class="line">TOP LABEL WORD</span><br><span class="line">S2 ENDS</span><br><span class="line"></span><br><span class="line">S3 SEGMENT</span><br><span class="line">    ASSUME DS:S1,SS:S2,CS:S3</span><br><span class="line">MAIN PROC FAR</span><br><span class="line">    MOV AX,S1</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AX,S2</span><br><span class="line">    MOV SS,AX</span><br><span class="line">    LEA SP,TOP</span><br><span class="line"></span><br><span class="line">L0:</span><br><span class="line">MOV AX,NUMA</span><br><span class="line">TEST AX,1</span><br><span class="line">JEL2</span><br><span class="line"></span><br><span class="line">;奇数</span><br><span class="line">L1:</span><br><span class="line">MOV BX,NUMB</span><br><span class="line">TEST BX,1</span><br><span class="line">JNEL4</span><br><span class="line">JMP EXIT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;偶数</span><br><span class="line">L2:</span><br><span class="line">MOV BX,NUMB</span><br><span class="line">TEST BX,1</span><br><span class="line">JNEL3</span><br><span class="line">JMP EXIT</span><br><span class="line"></span><br><span class="line">;A奇B偶</span><br><span class="line">L3:</span><br><span class="line">XCHG AX,BX</span><br><span class="line">JMP EXIT</span><br><span class="line">;都是奇数，都+1</span><br><span class="line">L4:</span><br><span class="line">INC AX</span><br><span class="line">LEA SI,NUMA</span><br><span class="line">MOV [SI],AX</span><br><span class="line">INC BX</span><br><span class="line">LEA SI,NUMB</span><br><span class="line">MOV [SI],BX</span><br><span class="line"></span><br><span class="line">EXIT:</span><br><span class="line">    MOV AH,4CH</span><br><span class="line">    INT 21H</span><br><span class="line">MAIN ENDP</span><br><span class="line">S3 ENDS</span><br><span class="line">    END MAIN</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ASM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/02/10/MySQL%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/10/MySQL%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL笔记"><a href="#MySQL笔记" class="headerlink" title="MySQL笔记"></a>MySQL笔记</h1><h2 id="登录和退出MySQL服务器"><a href="#登录和退出MySQL服务器" class="headerlink" title="登录和退出MySQL服务器"></a>登录和退出MySQL服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录MySQL</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysql -u root -p12345612</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出MySQL数据库服务器</span></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-- 显示所有数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE test;</span><br><span class="line"></span><br><span class="line">-- 切换数据库</span><br><span class="line">use test;</span><br><span class="line"></span><br><span class="line">-- 显示数据库中的所有表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 创建数据表</span><br><span class="line">CREATE TABLE pet (</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    owner VARCHAR(20),</span><br><span class="line">    species VARCHAR(20),</span><br><span class="line">    sex CHAR(1),</span><br><span class="line">    birth DATE,</span><br><span class="line">    death DATE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看数据表结构</span><br><span class="line">-- describe pet;</span><br><span class="line">desc pet;</span><br><span class="line"></span><br><span class="line">-- 查询表</span><br><span class="line">SELECT * from pet;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO pet VALUES (&#x27;puffball&#x27;, &#x27;Diane&#x27;, &#x27;hamster&#x27;, &#x27;f&#x27;, &#x27;1990-03-30&#x27;, NULL);</span><br><span class="line"></span><br><span class="line">-- 修改数据</span><br><span class="line">UPDATE pet SET name = &#x27;squirrel&#x27; where owner = &#x27;Diane&#x27;;</span><br><span class="line"></span><br><span class="line">-- 删除数据</span><br><span class="line">DELETE FROM pet where name = &#x27;squirrel&#x27;;</span><br><span class="line"></span><br><span class="line">-- 删除表</span><br><span class="line">DROP TABLE myorder;</span><br></pre></td></tr></table></figure><h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-- 主键约束</span><br><span class="line">-- 使某个字段不重复且不得为空，确保表内所有数据的唯一性。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 联合主键</span><br><span class="line">-- 联合主键中的每个字段都不能为空，并且加起来不能和已设置的联合主键重复。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    password VARCHAR(20),</span><br><span class="line">    PRIMARY KEY(id, name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 自增约束</span><br><span class="line">-- 自增约束的主键由系统自动递增分配。</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加主键约束</span><br><span class="line">-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：</span><br><span class="line">ALTER TABLE user ADD PRIMARY KEY(id);</span><br><span class="line">ALTER TABLE user MODIFY id INT PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">-- 删除主键</span><br><span class="line">ALTER TABLE user drop PRIMARY KEY;</span><br></pre></td></tr></table></figure><h3 id="唯一主键"><a href="#唯一主键" class="headerlink" title="唯一主键"></a>唯一主键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 建表时创建唯一主键</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    UNIQUE(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加唯一主键</span><br><span class="line">-- 如果建表时没有设置唯一建，还可以通过SQL语句设置（两种方式）：</span><br><span class="line">ALTER TABLE user ADD UNIQUE(name);</span><br><span class="line">ALTER TABLE user MODIFY name VARCHAR(20) UNIQUE;</span><br><span class="line"></span><br><span class="line">-- 删除唯一主键</span><br><span class="line">ALTER TABLE user DROP INDEX name;</span><br></pre></td></tr></table></figure><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 建表时添加非空约束</span><br><span class="line">-- 约束某个字段不能为空</span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 移除非空约束</span><br><span class="line">ALTER TABLE user MODIFY name VARCHAR(20);</span><br></pre></td></tr></table></figure><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 建表时添加默认约束</span><br><span class="line">-- 约束某个字段的默认值</span><br><span class="line">CREATE TABLE user2 (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    age INT DEFAULT 10</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 移除非空约束</span><br><span class="line">ALTER TABLE user MODIFY age INT;</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 班级</span><br><span class="line">CREATE TABLE classes (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 学生表</span><br><span class="line">CREATE TABLE students (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    -- 这里的 class_id 要和 classes 中的 id 字段相关联</span><br><span class="line">    class_id INT,</span><br><span class="line">    -- 表示 class_id 的值必须来自于 classes 中的 id 字段值</span><br><span class="line">    FOREIGN KEY(class_id) REFERENCES classes(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；</span><br><span class="line">-- 2. 主表中的记录被副表引用时，主表不可以被删除。</span><br></pre></td></tr></table></figure><h2 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>只要字段值还可以继续拆分，就不满足第一范式。</p><p>范式设计得越详细，对某些实际操作可能会更好，但并非都有好处，需要对项目的实际情况进行设定。</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 订单表</span><br><span class="line">CREATE TABLE myorder (</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    product_name VARCHAR(20),</span><br><span class="line">    customer_name VARCHAR(20),</span><br><span class="line">    PRIMARY KEY (product_id, customer_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p><p>这就不满足第二范式：其他列都必须完全依赖于主键列！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE product (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    customer_phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">CREATE DATABASE select_test;</span><br><span class="line">-- 切换数据库</span><br><span class="line">USE select_test;</span><br><span class="line"></span><br><span class="line">-- 创建学生表</span><br><span class="line">CREATE TABLE student (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    sex VARCHAR(10) NOT NULL,</span><br><span class="line">    birthday DATE, -- 生日</span><br><span class="line">    class VARCHAR(20) -- 所在班级</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建教师表</span><br><span class="line">CREATE TABLE teacher (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    sex VARCHAR(10) NOT NULL,</span><br><span class="line">    birthday DATE,</span><br><span class="line">    profession VARCHAR(20) NOT NULL, -- 职称</span><br><span class="line">    department VARCHAR(20) NOT NULL -- 部门</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建课程表</span><br><span class="line">CREATE TABLE course (</span><br><span class="line">    no VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    t_no VARCHAR(20) NOT NULL, -- 教师编号</span><br><span class="line">    -- 表示该 tno 来自于 teacher 表中的 no 字段值</span><br><span class="line">    FOREIGN KEY(t_no) REFERENCES teacher(no) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 成绩表</span><br><span class="line">CREATE TABLE score (</span><br><span class="line">    s_no VARCHAR(20) NOT NULL, -- 学生编号</span><br><span class="line">    c_no VARCHAR(20) NOT NULL, -- 课程号</span><br><span class="line">    degree DECIMAL,-- 成绩</span><br><span class="line">    -- 表示该 s_no, c_no 分别来自于 student, course 表中的 no 字段值</span><br><span class="line">    FOREIGN KEY(s_no) REFERENCES student(no),</span><br><span class="line">    FOREIGN KEY(c_no) REFERENCES course(no),</span><br><span class="line">    -- 设置 s_no, c_no 为联合主键</span><br><span class="line">    PRIMARY KEY(s_no, c_no)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 查看所有表</span><br><span class="line">SHOW TABLES;</span><br><span class="line"></span><br><span class="line">-- 添加学生表数据</span><br><span class="line">INSERT INTO student VALUES(&#x27;101&#x27;, &#x27;曾华&#x27;, &#x27;男&#x27;, &#x27;1977-09-01&#x27;, &#x27;95033&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;102&#x27;, &#x27;匡明&#x27;, &#x27;男&#x27;, &#x27;1975-10-02&#x27;, &#x27;95031&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;103&#x27;, &#x27;王丽&#x27;, &#x27;女&#x27;, &#x27;1976-01-23&#x27;, &#x27;95033&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;104&#x27;, &#x27;李军&#x27;, &#x27;男&#x27;, &#x27;1976-02-20&#x27;, &#x27;95033&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;105&#x27;, &#x27;王芳&#x27;, &#x27;女&#x27;, &#x27;1975-02-10&#x27;, &#x27;95031&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;106&#x27;, &#x27;陆军&#x27;, &#x27;男&#x27;, &#x27;1974-06-03&#x27;, &#x27;95031&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;107&#x27;, &#x27;王尼玛&#x27;, &#x27;男&#x27;, &#x27;1976-02-20&#x27;, &#x27;95033&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;108&#x27;, &#x27;张全蛋&#x27;, &#x27;男&#x27;, &#x27;1975-02-10&#x27;, &#x27;95031&#x27;);</span><br><span class="line">INSERT INTO student VALUES(&#x27;109&#x27;, &#x27;赵铁柱&#x27;, &#x27;男&#x27;, &#x27;1974-06-03&#x27;, &#x27;95031&#x27;);</span><br><span class="line"></span><br><span class="line">-- 添加教师表数据</span><br><span class="line">INSERT INTO teacher VALUES(&#x27;804&#x27;, &#x27;李诚&#x27;, &#x27;男&#x27;, &#x27;1958-12-02&#x27;, &#x27;副教授&#x27;, &#x27;计算机系&#x27;);</span><br><span class="line">INSERT INTO teacher VALUES(&#x27;856&#x27;, &#x27;张旭&#x27;, &#x27;男&#x27;, &#x27;1969-03-12&#x27;, &#x27;讲师&#x27;, &#x27;电子工程系&#x27;);</span><br><span class="line">INSERT INTO teacher VALUES(&#x27;825&#x27;, &#x27;王萍&#x27;, &#x27;女&#x27;, &#x27;1972-05-05&#x27;, &#x27;助教&#x27;, &#x27;计算机系&#x27;);</span><br><span class="line">INSERT INTO teacher VALUES(&#x27;831&#x27;, &#x27;刘冰&#x27;, &#x27;女&#x27;, &#x27;1977-08-14&#x27;, &#x27;助教&#x27;, &#x27;电子工程系&#x27;);</span><br><span class="line"></span><br><span class="line">-- 添加课程表数据</span><br><span class="line">INSERT INTO course VALUES(&#x27;3-105&#x27;, &#x27;计算机导论&#x27;, &#x27;825&#x27;);</span><br><span class="line">INSERT INTO course VALUES(&#x27;3-245&#x27;, &#x27;操作系统&#x27;, &#x27;804&#x27;);</span><br><span class="line">INSERT INTO course VALUES(&#x27;6-166&#x27;, &#x27;数字电路&#x27;, &#x27;856&#x27;);</span><br><span class="line">INSERT INTO course VALUES(&#x27;9-888&#x27;, &#x27;高等数学&#x27;, &#x27;831&#x27;);</span><br><span class="line"></span><br><span class="line">-- 添加添加成绩表数据</span><br><span class="line">INSERT INTO score VALUES(&#x27;103&#x27;, &#x27;3-105&#x27;, &#x27;92&#x27;);</span><br><span class="line">INSERT INTO score VALUES(&#x27;103&#x27;, &#x27;3-245&#x27;, &#x27;86&#x27;);</span><br><span class="line">INSERT INTO score VALUES(&#x27;103&#x27;, &#x27;6-166&#x27;, &#x27;85&#x27;);</span><br><span class="line">INSERT INTO score VALUES(&#x27;105&#x27;, &#x27;3-105&#x27;, &#x27;88&#x27;);</span><br><span class="line">INSERT INTO score VALUES(&#x27;105&#x27;, &#x27;3-245&#x27;, &#x27;75&#x27;);</span><br><span class="line">INSERT INTO score VALUES(&#x27;105&#x27;, &#x27;6-166&#x27;, &#x27;79&#x27;);</span><br><span class="line">INSERT INTO score VALUES(&#x27;109&#x27;, &#x27;3-105&#x27;, &#x27;76&#x27;);</span><br><span class="line">INSERT INTO score VALUES(&#x27;109&#x27;, &#x27;3-245&#x27;, &#x27;68&#x27;);</span><br><span class="line">INSERT INTO score VALUES(&#x27;109&#x27;, &#x27;6-166&#x27;, &#x27;81&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查看表结构</span><br><span class="line">SELECT * FROM course;</span><br><span class="line">SELECT * FROM score;</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM teacher;</span><br></pre></td></tr></table></figure><h3 id="1-到-10"><a href="#1-到-10" class="headerlink" title="1 到 10"></a>1 到 10</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">-- 查询 student 表的所有行</span><br><span class="line">SELECT * FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询 student 表中的 name、sex 和 class 字段的所有行</span><br><span class="line">SELECT name, sex, class FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询 teacher 表中不重复的 department 列</span><br><span class="line">-- department: 去重查询</span><br><span class="line">SELECT DISTINCT department FROM teacher;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）</span><br><span class="line">-- BETWEEN xx AND xx: 查询区间, AND 表示 &quot;并且&quot;</span><br><span class="line">SELECT * FROM score WHERE degree BETWEEN 60 AND 80;</span><br><span class="line">SELECT * FROM score WHERE degree &gt; 60 AND degree &lt; 80;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中成绩为 85, 86 或 88 的行</span><br><span class="line">-- IN: 查询规定中的多个值</span><br><span class="line">SELECT * FROM score WHERE degree IN (85, 86, 88);</span><br><span class="line"></span><br><span class="line">-- 查询 student 表中 &#x27;95031&#x27; 班或性别为 &#x27;女&#x27; 的所有行</span><br><span class="line">-- or: 表示或者关系</span><br><span class="line">SELECT * FROM student WHERE class = &#x27;95031&#x27; or sex = &#x27;女&#x27;;</span><br><span class="line"></span><br><span class="line">-- 以 class 降序的方式查询 student 表的所有行</span><br><span class="line">-- DESC: 降序，从高到低</span><br><span class="line">-- ASC（默认）: 升序，从低到高</span><br><span class="line">SELECT * FROM student ORDER BY class DESC;</span><br><span class="line">SELECT * FROM student ORDER BY class ASC;</span><br><span class="line"></span><br><span class="line">-- 以 c_no 升序、degree 降序查询 score 表的所有行</span><br><span class="line">SELECT * FROM score ORDER BY c_no ASC, degree DESC;</span><br><span class="line"></span><br><span class="line">-- 查询 &quot;95031&quot; 班的学生人数</span><br><span class="line">-- COUNT: 统计</span><br><span class="line">SELECT COUNT(*) FROM student WHERE class = &#x27;95031&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。</span><br><span class="line">-- (SELECT MAX(degree) FROM score): 子查询，算出最高分</span><br><span class="line">SELECT s_no, c_no FROM score WHERE degree = (SELECT MAX(degree) FROM score);</span><br><span class="line"></span><br><span class="line">--  排序查询</span><br><span class="line">-- LIMIT r, n: 表示从第r行开始，查询n条数据</span><br><span class="line">SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 0, 1;</span><br></pre></td></tr></table></figure><h3 id="分组计算平均成绩"><a href="#分组计算平均成绩" class="headerlink" title="分组计算平均成绩"></a>分组计算平均成绩</h3><p><strong>查询每门课的平均成绩。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- AVG: 平均值</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no = &#x27;3-105&#x27;;</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no = &#x27;3-245&#x27;;</span><br><span class="line">SELECT AVG(degree) FROM score WHERE c_no = &#x27;6-166&#x27;;</span><br><span class="line"></span><br><span class="line">-- GROUP BY: 分组查询</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</span><br></pre></td></tr></table></figure><h3 id="分组条件与模糊查询"><a href="#分组条件与模糊查询" class="headerlink" title="分组条件与模糊查询"></a>分组条件与模糊查询</h3><p><strong>查询 <code>score</code> 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score;</span><br><span class="line">-- c_no 课程编号</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>分析表发现，至少有 2 名学生选修的课程是 <code>3-105</code> 、<code>3-245</code> 、<code>6-166</code> ，以 3 开头的课程是 <code>3-105</code> 、<code>3-245</code> 。也就是说，我们要查询所有 <code>3-105</code> 和 <code>3-245</code> 的 <code>degree</code> 平均分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-- 首先把 c_no, AVG(degree) 通过分组查询出来</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     85.3333 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line"></span><br><span class="line">-- 再查询出至少有 2 名学生选修的课程</span><br><span class="line">-- HAVING: 表示持有</span><br><span class="line">HAVING COUNT(c_no) &gt;= 2</span><br><span class="line"></span><br><span class="line">-- 并且是以 3 开头的课程</span><br><span class="line">-- LIKE 表示模糊查询，&quot;%&quot; 是一个通配符，匹配 &quot;3&quot; 后面的任意字符。</span><br><span class="line">AND c_no LIKE &#x27;3%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 把前面的SQL语句拼接起来，</span><br><span class="line">-- 后面加上一个 COUNT(*)，表示将每个分组的个数也查询出来。</span><br><span class="line">SELECT c_no, AVG(degree), COUNT(*) FROM score GROUP BY c_no</span><br><span class="line">HAVING COUNT(c_no) &gt;= 2 AND c_no LIKE &#x27;3%&#x27;;</span><br><span class="line">+-------+-------------+----------+</span><br><span class="line">| c_no  | AVG(degree) | COUNT(*) |</span><br><span class="line">+-------+-------------+----------+</span><br><span class="line">| 3-105 |     85.3333 |        3 |</span><br><span class="line">| 3-245 |     76.3333 |        3 |</span><br><span class="line">+-------+-------------+----------+</span><br></pre></td></tr></table></figure><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询 - 1"></a>多表查询 - 1</h3><p><strong>查询所有学生的 <code>name</code>，以及该学生在 <code>score</code> 表中对应的 <code>c_no</code> 和 <code>degree</code> 。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">SELECT no, name FROM student;</span><br><span class="line">+-----+-----------+</span><br><span class="line">| no  | name      |</span><br><span class="line">+-----+-----------+</span><br><span class="line">| 101 | 曾华      |</span><br><span class="line">| 102 | 匡明      |</span><br><span class="line">| 103 | 王丽      |</span><br><span class="line">| 104 | 李军      |</span><br><span class="line">| 105 | 王芳      |</span><br><span class="line">| 106 | 陆军      |</span><br><span class="line">| 107 | 王尼玛    |</span><br><span class="line">| 108 | 张全蛋    |</span><br><span class="line">| 109 | 赵铁柱    |</span><br><span class="line">+-----+-----------+</span><br><span class="line"></span><br><span class="line">SELECT s_no, c_no, degree FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>通过分析可以发现，只要把 <code>score</code> 表中的 <code>s_no</code> 字段值替换成 <code>student</code> 表中对应的 <code>name</code> 字段值就可以了，如何做呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- FROM...: 表示从 student, score 表中查询</span><br><span class="line">-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。</span><br><span class="line">SELECT name, c_no, degree FROM student, score </span><br><span class="line">WHERE student.no = score.s_no;</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| name      | c_no  | degree |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| 王丽      | 3-105 |     92 |</span><br><span class="line">| 王丽      | 3-245 |     86 |</span><br><span class="line">| 王丽      | 6-166 |     85 |</span><br><span class="line">| 王芳      | 3-105 |     88 |</span><br><span class="line">| 王芳      | 3-245 |     75 |</span><br><span class="line">| 王芳      | 6-166 |     79 |</span><br><span class="line">| 赵铁柱    | 3-105 |     76 |</span><br><span class="line">| 赵铁柱    | 3-245 |     68 |</span><br><span class="line">| 赵铁柱    | 6-166 |     81 |</span><br><span class="line">+-----------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="多表查询-2"><a href="#多表查询-2" class="headerlink" title="多表查询 - 2"></a>多表查询 - 2</h3><p><strong>查询所有学生的 <code>no</code> 、课程名称 ( <code>course</code> 表中的 <code>name</code> ) 和成绩 ( <code>score</code> 表中的 <code>degree</code> ) 列。</strong></p><p>只有 <code>score</code> 关联学生的 <code>no</code> ，因此只要查询 <code>score</code> 表，就能找出所有和学生相关的 <code>no</code> 和 <code>degree</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT s_no, c_no, degree FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>然后查询 <code>course</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------+-----------------+</span><br><span class="line">| no    | name            |</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| 3-105 | 计算机导论      |</span><br><span class="line">| 3-245 | 操作系统        |</span><br><span class="line">| 6-166 | 数字电路        |</span><br><span class="line">| 9-888 | 高等数学        |</span><br><span class="line">+-------+-----------------+</span><br></pre></td></tr></table></figure><p>只要把 <code>score</code> 表中的 <code>c_no</code> 替换成 <code>course</code> 表中对应的 <code>name</code> 字段值就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 增加一个查询字段 name，分别从 score、course 这两个表中查询。</span><br><span class="line">-- as 表示取一个该字段的别名。</span><br><span class="line">SELECT s_no, name as c_name, degree FROM score, course</span><br><span class="line">WHERE score.c_no = course.no;</span><br><span class="line">+------+-----------------+--------+</span><br><span class="line">| s_no | c_name          | degree |</span><br><span class="line">+------+-----------------+--------+</span><br><span class="line">| 103  | 计算机导论      |     92 |</span><br><span class="line">| 105  | 计算机导论      |     88 |</span><br><span class="line">| 109  | 计算机导论      |     76 |</span><br><span class="line">| 103  | 操作系统        |     86 |</span><br><span class="line">| 105  | 操作系统        |     75 |</span><br><span class="line">| 109  | 操作系统        |     68 |</span><br><span class="line">| 103  | 数字电路        |     85 |</span><br><span class="line">| 105  | 数字电路        |     79 |</span><br><span class="line">| 109  | 数字电路        |     81 |</span><br><span class="line">+------+-----------------+--------+</span><br></pre></td></tr></table></figure><h3 id="三表关联查询"><a href="#三表关联查询" class="headerlink" title="三表关联查询"></a>三表关联查询</h3><p><strong>查询所有学生的 <code>name</code> 、课程名 ( <code>course</code> 表中的 <code>name</code> ) 和 <code>degree</code> 。</strong></p><p>只有 <code>score</code> 表中关联学生的学号和课堂号，我们只要围绕着 <code>score</code> 这张表查询就好了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>只要把 <code>s_no</code> 和 <code>c_no</code> 替换成 <code>student</code> 和 <code>srouse</code> 表中对应的 <code>name</code> 字段值就好了。</p><p>首先把 <code>s_no</code> 替换成 <code>student</code> 表中的 <code>name</code> 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, c_no, degree FROM student, score WHERE student.no = score.s_no;</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| name      | c_no  | degree |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| 王丽      | 3-105 |     92 |</span><br><span class="line">| 王丽      | 3-245 |     86 |</span><br><span class="line">| 王丽      | 6-166 |     85 |</span><br><span class="line">| 王芳      | 3-105 |     88 |</span><br><span class="line">| 王芳      | 3-245 |     75 |</span><br><span class="line">| 王芳      | 6-166 |     79 |</span><br><span class="line">| 赵铁柱    | 3-105 |     76 |</span><br><span class="line">| 赵铁柱    | 3-245 |     68 |</span><br><span class="line">| 赵铁柱    | 6-166 |     81 |</span><br><span class="line">+-----------+-------+--------+</span><br></pre></td></tr></table></figure><p>再把 <code>c_no</code> 替换成 <code>course</code> 表中的 <code>name</code> 字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 课程表</span><br><span class="line">SELECT no, name FROM course;</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| no    | name            |</span><br><span class="line">+-------+-----------------+</span><br><span class="line">| 3-105 | 计算机导论      |</span><br><span class="line">| 3-245 | 操作系统        |</span><br><span class="line">| 6-166 | 数字电路        |</span><br><span class="line">| 9-888 | 高等数学        |</span><br><span class="line">+-------+-----------------+</span><br><span class="line"></span><br><span class="line">-- 由于字段名存在重复，使用 &quot;表名.字段名 as 别名&quot; 代替。</span><br><span class="line">SELECT student.name as s_name, course.name as c_name, degree </span><br><span class="line">FROM student, score, course</span><br><span class="line">WHERE student.NO = score.s_no</span><br><span class="line">AND score.c_no = course.no;</span><br></pre></td></tr></table></figure><h3 id="子查询加分组求平均分"><a href="#子查询加分组求平均分" class="headerlink" title="子查询加分组求平均分"></a>子查询加分组求平均分</h3><p><strong>查询 <code>95031</code> 班学生每门课程的平均成绩。</strong></p><p>在 <code>score</code> 表中根据 <code>student</code>  表的学生编号筛选出学生的课堂号和成绩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- IN (..): 将筛选出的学生号当做 s_no 的条件查询</span><br><span class="line">SELECT s_no, c_no, degree FROM score</span><br><span class="line">WHERE s_no IN (SELECT no FROM student WHERE class = &#x27;95031&#x27;);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><p>这时只要将 <code>c_no</code> 分组一下就能得出 <code>95031</code> 班学生每门课的平均成绩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT c_no, AVG(degree) FROM score</span><br><span class="line">WHERE s_no IN (SELECT no FROM student WHERE class = &#x27;95031&#x27;)</span><br><span class="line">GROUP BY c_no;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     82.0000 |</span><br><span class="line">| 3-245 |     71.5000 |</span><br><span class="line">| 6-166 |     80.0000 |</span><br><span class="line">+-------+-------------+</span><br></pre></td></tr></table></figure><h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询 - 1"></a>子查询 - 1</h3><p><strong>查询在 <code>3-105</code> 课程中，所有成绩高于 <code>109</code> 号同学的记录。</strong></p><p>首先筛选出课堂号为 <code>3-105</code> ，在找出所有成绩高于 <code>109</code> 号同学的的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score </span><br><span class="line">WHERE c_no = &#x27;3-105&#x27;</span><br><span class="line">AND degree &gt; (SELECT degree FROM score WHERE s_no = &#x27;109&#x27; AND c_no = &#x27;3-105&#x27;);</span><br></pre></td></tr></table></figure><h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询 - 2"></a>子查询 - 2</h3><p><strong>查询所有成绩高于 <code>109</code> 号同学的 <code>3-105</code> 课程成绩记录。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 不限制课程号，只要成绩大于109号同学的3-105课程成绩就可以。</span><br><span class="line">SELECT * FROM score</span><br><span class="line">WHERE degree &gt; (SELECT degree FROM score WHERE s_no = &#x27;109&#x27; AND c_no = &#x27;3-105&#x27;);</span><br></pre></td></tr></table></figure><h3 id="YEAR-函数与带-IN-关键字查询"><a href="#YEAR-函数与带-IN-关键字查询" class="headerlink" title="YEAR 函数与带 IN 关键字查询"></a>YEAR 函数与带 IN 关键字查询</h3><p><strong>查询所有和 <code>101</code> 、<code>108</code> 号学生同年出生的 <code>no</code> 、<code>name</code> 、<code>birthday</code> 列。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- YEAR(..): 取出日期中的年份</span><br><span class="line">SELECT no, name, birthday FROM student</span><br><span class="line">WHERE YEAR(birthday) IN (SELECT YEAR(birthday) FROM student WHERE no IN (101, 108));</span><br></pre></td></tr></table></figure><h3 id="多层嵌套子查询"><a href="#多层嵌套子查询" class="headerlink" title="多层嵌套子查询"></a>多层嵌套子查询</h3><p><strong>查询 <code>&#39;张旭&#39;</code> 教师任课的学生成绩表。</strong></p><p>首先找到教师编号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NO FROM teacher WHERE NAME = &#x27;张旭&#x27;</span><br></pre></td></tr></table></figure><p>通过 <code>sourse</code> 表找到该教师课程号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NO FROM course WHERE t_no = ( SELECT NO FROM teacher WHERE NAME = &#x27;张旭&#x27; );</span><br></pre></td></tr></table></figure><p>通过筛选出的课程号查询成绩表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no = (</span><br><span class="line">    SELECT no FROM course WHERE t_no = ( </span><br><span class="line">        SELECT no FROM teacher WHERE NAME = &#x27;张旭&#x27; </span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>查询某选修课程多于5个同学的教师姓名。</strong></p><p>首先在 <code>teacher</code> 表中，根据 <code>no</code> 字段来判断该教师的同一门课程是否有至少5名学员选修：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 查询 teacher 表</span><br><span class="line">SELECT no, name FROM teacher;</span><br><span class="line">+-----+--------+</span><br><span class="line">| no  | name   |</span><br><span class="line">+-----+--------+</span><br><span class="line">| 804 | 李诚   |</span><br><span class="line">| 825 | 王萍   |</span><br><span class="line">| 831 | 刘冰   |</span><br><span class="line">| 856 | 张旭   |</span><br><span class="line">+-----+--------+</span><br><span class="line"></span><br><span class="line">SELECT name FROM teacher WHERE no IN (</span><br><span class="line">    -- 在这里找到对应的条件</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看和教师编号有有关的表的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM course;</span><br><span class="line">-- t_no: 教师编号</span><br><span class="line">+-------+-----------------+------+</span><br><span class="line">| no    | name            | t_no |</span><br><span class="line">+-------+-----------------+------+</span><br><span class="line">| 3-105 | 计算机导论      | 825  |</span><br><span class="line">| 3-245 | 操作系统        | 804  |</span><br><span class="line">| 6-166 | 数字电路        | 856  |</span><br><span class="line">| 9-888 | 高等数学        | 831  |</span><br><span class="line">+-------+-----------------+------+</span><br></pre></td></tr></table></figure><p>我们已经找到和教师编号有关的字段就在 <code>course</code> 表中，但是还无法知道哪门课程至少有5名学生选修，所以还需要根据 <code>score</code> 表来查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 在此之前向 score 插入一些数据，以便丰富查询条件。</span><br><span class="line">INSERT INTO score VALUES (&#x27;101&#x27;, &#x27;3-105&#x27;, &#x27;90&#x27;);</span><br><span class="line">INSERT INTO score VALUES (&#x27;102&#x27;, &#x27;3-105&#x27;, &#x27;91&#x27;);</span><br><span class="line">INSERT INTO score VALUES (&#x27;104&#x27;, &#x27;3-105&#x27;, &#x27;89&#x27;);</span><br><span class="line"></span><br><span class="line">-- 查询 score 表</span><br><span class="line">SELECT * FROM score;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 103  | 6-166 |     85 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">-- 在 score 表中将 c_no 作为分组，并且限制 c_no 持有至少 5 条数据。</span><br><span class="line">SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5;</span><br><span class="line">+-------+</span><br><span class="line">| c_no  |</span><br><span class="line">+-------+</span><br><span class="line">| 3-105 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p>根据筛选出来的课程号，找出在某课程中，拥有至少5名学员的教师编号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT t_no FROM course WHERE no IN (</span><br><span class="line">    SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5</span><br><span class="line">);</span><br><span class="line">+------+</span><br><span class="line">| t_no |</span><br><span class="line">+------+</span><br><span class="line">| 825  |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>在 <code>teacher</code> 表中，根据筛选出来的教师编号找到教师姓名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT name FROM teacher WHERE no IN (</span><br><span class="line">    -- 最终条件</span><br><span class="line">    SELECT t_no FROM course WHERE no IN (</span><br><span class="line">        SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) &gt; 5</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询 - 3"></a>子查询 - 3</h3><p><strong>查询 “计算机系” 课程的成绩表。</strong></p><p>思路是，先找出 <code>course</code> 表中所有 <code>计算机系</code> 课程的编号，然后根据这个编号查询 <code>score</code> 表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">-- 通过 teacher 表查询所有 `计算机系` 的教师编号</span><br><span class="line">SELECT no, name, department FROM teacher WHERE department = &#x27;计算机系&#x27;</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line">| no  | name   | department   |</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line">| 804 | 李诚   | 计算机系     |</span><br><span class="line">| 825 | 王萍   | 计算机系     |</span><br><span class="line">+-----+--------+--------------+</span><br><span class="line"></span><br><span class="line">-- 通过 course 表查询该教师的课程编号</span><br><span class="line">SELECT no FROM course WHERE t_no IN (</span><br><span class="line">    SELECT no FROM teacher WHERE department = &#x27;计算机系&#x27;</span><br><span class="line">);</span><br><span class="line">+-------+</span><br><span class="line">| no    |</span><br><span class="line">+-------+</span><br><span class="line">| 3-245 |</span><br><span class="line">| 3-105 |</span><br><span class="line">+-------+</span><br><span class="line"></span><br><span class="line">-- 根据筛选出来的课程号查询成绩表</span><br><span class="line">SELECT * FROM score WHERE c_no IN (</span><br><span class="line">    SELECT no FROM course WHERE t_no IN (</span><br><span class="line">        SELECT no FROM teacher WHERE department = &#x27;计算机系&#x27;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="UNION-和-NOTIN-的使用"><a href="#UNION-和-NOTIN-的使用" class="headerlink" title="UNION 和 NOTIN 的使用"></a>UNION 和 NOTIN 的使用</h3><p><strong>查询 <code>计算机系</code> 与 <code>电子工程系</code> 中的不同职称的教师。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- NOT: 代表逻辑非</span><br><span class="line">SELECT * FROM teacher WHERE department = &#x27;计算机系&#x27; AND profession NOT IN (</span><br><span class="line">    SELECT profession FROM teacher WHERE department = &#x27;电子工程系&#x27;</span><br><span class="line">)</span><br><span class="line">-- 合并两个集</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM teacher WHERE department = &#x27;电子工程系&#x27; AND profession NOT IN (</span><br><span class="line">    SELECT profession FROM teacher WHERE department = &#x27;计算机系&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ANY-表示至少一个-DESC-降序"><a href="#ANY-表示至少一个-DESC-降序" class="headerlink" title="ANY 表示至少一个 - DESC ( 降序 )"></a>ANY 表示至少一个 - DESC ( 降序 )</h3><p><strong>查询课程 <code>3-105</code> 且成绩 <u>至少</u> 高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no = &#x27;3-105&#x27;;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">SELECT * FROM score WHERE c_no = &#x27;3-245&#x27;;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-245 |     86 |</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">+------+-------+--------+</span><br><span class="line"></span><br><span class="line">-- ANY: 符合SQL语句中的任意条件。</span><br><span class="line">-- 也就是说，在 3-105 成绩中，只要有一个大于从 3-245 筛选出来的任意行就符合条件，</span><br><span class="line">-- 最后根据降序查询结果。</span><br><span class="line">SELECT * FROM score WHERE c_no = &#x27;3-105&#x27; AND degree &gt; ANY(</span><br><span class="line">    SELECT degree FROM score WHERE c_no = &#x27;3-245&#x27;</span><br><span class="line">) ORDER BY degree DESC;</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="表示所有的-ALL"><a href="#表示所有的-ALL" class="headerlink" title="表示所有的 ALL"></a>表示所有的 ALL</h3><p><strong>查询课程 <code>3-105</code> 且成绩高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 只需对上一道题稍作修改。</span><br><span class="line">-- ALL: 符合SQL语句中的所有条件。</span><br><span class="line">-- 也就是说，在 3-105 每一行成绩中，都要大于从 3-245 筛选出来全部行才算符合条件。</span><br><span class="line">SELECT * FROM score WHERE c_no = &#x27;3-105&#x27; AND degree &gt; ALL(</span><br><span class="line">    SELECT degree FROM score WHERE c_no = &#x27;3-245&#x27;</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 105  | 3-105 |     88 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="复制表的数据作为条件查询"><a href="#复制表的数据作为条件查询" class="headerlink" title="复制表的数据作为条件查询"></a>复制表的数据作为条件查询</h3><p><strong>查询某课程成绩比该课程平均成绩低的 <code>score</code> 表。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">-- 查询平均分</span><br><span class="line">SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| c_no  | AVG(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     87.6667 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line"></span><br><span class="line">-- 查询 score 表</span><br><span class="line">SELECT degree FROM score;</span><br><span class="line">+--------+</span><br><span class="line">| degree |</span><br><span class="line">+--------+</span><br><span class="line">|     90 |</span><br><span class="line">|     91 |</span><br><span class="line">|     92 |</span><br><span class="line">|     86 |</span><br><span class="line">|     85 |</span><br><span class="line">|     89 |</span><br><span class="line">|     88 |</span><br><span class="line">|     75 |</span><br><span class="line">|     79 |</span><br><span class="line">|     76 |</span><br><span class="line">|     68 |</span><br><span class="line">|     81 |</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">-- 将表 b 作用于表 a 中查询数据</span><br><span class="line">-- score a (b): 将表声明为 a (b)，</span><br><span class="line">-- 如此就能用 a.c_no = b.c_no 作为条件执行查询了。</span><br><span class="line">SELECT * FROM score a WHERE degree &lt; (</span><br><span class="line">    (SELECT AVG(degree) FROM score b WHERE a.c_no = b.c_no)</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 105  | 3-245 |     75 |</span><br><span class="line">| 105  | 6-166 |     79 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">| 109  | 3-245 |     68 |</span><br><span class="line">| 109  | 6-166 |     81 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询 - 4"></a>子查询 - 4</h3><p><strong>查询所有任课 ( 在 <code>course</code> 表里有课程 ) 教师的 <code>name</code> 和 <code>department</code></strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, department FROM teacher WHERE no IN (SELECT t_no FROM course);</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| name   | department      |</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| 李诚   | 计算机系        |</span><br><span class="line">| 王萍   | 计算机系        |</span><br><span class="line">| 刘冰   | 电子工程系      |</span><br><span class="line">| 张旭   | 电子工程系      |</span><br><span class="line">+--------+-----------------+</span><br></pre></td></tr></table></figure><h3 id="条件加组筛选"><a href="#条件加组筛选" class="headerlink" title="条件加组筛选"></a>条件加组筛选</h3><p><strong>查询 <code>student</code> 表中至少有 2 名男生的 <code>class</code> 。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- 查看学生表信息</span><br><span class="line">SELECT * FROM student;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">| 103 | 王丽      | 女  | 1976-01-23 | 95033 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 105 | 王芳      | 女  | 1975-02-10 | 95031 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 107 | 王尼玛    | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line"></span><br><span class="line">-- 只查询性别为男，然后按 class 分组，并限制 class 行大于 1。</span><br><span class="line">SELECT class FROM student WHERE sex = &#x27;男&#x27; GROUP BY class HAVING COUNT(*) &gt; 1;</span><br><span class="line">+-------+</span><br><span class="line">| class |</span><br><span class="line">+-------+</span><br><span class="line">| 95033 |</span><br><span class="line">| 95031 |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><h3 id="NOTLIKE-模糊查询取反"><a href="#NOTLIKE-模糊查询取反" class="headerlink" title="NOTLIKE 模糊查询取反"></a>NOTLIKE 模糊查询取反</h3><p><strong>查询 <code>student</code> 表中不姓 “王” 的同学记录。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- NOT: 取反</span><br><span class="line">-- LIKE: 模糊查询</span><br><span class="line">mysql&gt; SELECT * FROM student WHERE name NOT LIKE &#x27;王%&#x27;;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br></pre></td></tr></table></figure><h3 id="YEAR-与-NOW-函数"><a href="#YEAR-与-NOW-函数" class="headerlink" title="YEAR 与 NOW 函数"></a>YEAR 与 NOW 函数</h3><p><strong>查询 <code>student</code> 表中每个学生的姓名和年龄。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 使用函数 YEAR(NOW()) 计算出当前年份，减去出生年份后得出年龄。</span><br><span class="line">SELECT name, YEAR(NOW()) - YEAR(birthday) as age FROM student;</span><br><span class="line">+-----------+------+</span><br><span class="line">| name      | age  |</span><br><span class="line">+-----------+------+</span><br><span class="line">| 曾华      |   42 |</span><br><span class="line">| 匡明      |   44 |</span><br><span class="line">| 王丽      |   43 |</span><br><span class="line">| 李军      |   43 |</span><br><span class="line">| 王芳      |   44 |</span><br><span class="line">| 陆军      |   45 |</span><br><span class="line">| 王尼玛    |   43 |</span><br><span class="line">| 张全蛋    |   44 |</span><br><span class="line">| 赵铁柱    |   45 |</span><br><span class="line">| 张飞      |   45 |</span><br><span class="line">+-----------+------+</span><br></pre></td></tr></table></figure><h3 id="MAX-与-MIN-函数"><a href="#MAX-与-MIN-函数" class="headerlink" title="MAX 与 MIN 函数"></a>MAX 与 MIN 函数</h3><p><strong>查询 <code>student</code> 表中最大和最小的 <code>birthday</code> 值。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(birthday), MIN(birthday) FROM student;</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| MAX(birthday) | MIN(birthday) |</span><br><span class="line">+---------------+---------------+</span><br><span class="line">| 1977-09-01    | 1974-06-03    |</span><br><span class="line">+---------------+---------------+</span><br></pre></td></tr></table></figure><h3 id="多段排序"><a href="#多段排序" class="headerlink" title="多段排序"></a>多段排序</h3><p><strong>以 <code>class</code> 和 <code>birthday</code> 从大到小的顺序查询 <code>student</code> 表。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student ORDER BY class DESC, birthday;</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| no  | name      | sex | birthday   | class |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br><span class="line">| 110 | 张飞      | 男  | 1974-06-03 | 95038 |</span><br><span class="line">| 103 | 王丽      | 女  | 1976-01-23 | 95033 |</span><br><span class="line">| 104 | 李军      | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 107 | 王尼玛    | 男  | 1976-02-20 | 95033 |</span><br><span class="line">| 101 | 曾华      | 男  | 1977-09-01 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 |</span><br><span class="line">| 105 | 王芳      | 女  | 1975-02-10 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男  | 1975-02-10 | 95031 |</span><br><span class="line">| 102 | 匡明      | 男  | 1975-10-02 | 95031 |</span><br><span class="line">+-----+-----------+-----+------------+-------+</span><br></pre></td></tr></table></figure><h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询 - 5"></a>子查询 - 5</h3><p><strong>查询 “男” 教师及其所上的课程。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM course WHERE t_no in (SELECT no FROM teacher WHERE sex = &#x27;男&#x27;);</span><br><span class="line">+-------+--------------+------+</span><br><span class="line">| no    | name         | t_no |</span><br><span class="line">+-------+--------------+------+</span><br><span class="line">| 3-245 | 操作系统     | 804  |</span><br><span class="line">| 6-166 | 数字电路     | 856  |</span><br><span class="line">+-------+--------------+------+</span><br></pre></td></tr></table></figure><h3 id="MAX-函数与子查询"><a href="#MAX-函数与子查询" class="headerlink" title="MAX 函数与子查询"></a>MAX 函数与子查询</h3><p><strong>查询最高分同学的 <code>score</code> 表。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 找出最高成绩（该查询只能有一个结果）</span><br><span class="line">SELECT MAX(degree) FROM score;</span><br><span class="line"></span><br><span class="line">-- 根据上面的条件筛选出所有最高成绩表，</span><br><span class="line">-- 该查询可能有多个结果，假设 degree 值多次符合条件。</span><br><span class="line">SELECT * FROM score WHERE degree = (SELECT MAX(degree) FROM score);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 103  | 3-105 |     92 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询 - 6"></a>子查询 - 6</h3><p><strong>查询和 “李军” 同性别的所有同学 <code>name</code> 。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 首先将李军的性别作为条件取出来</span><br><span class="line">SELECT sex FROM student WHERE name = &#x27;李军&#x27;;</span><br><span class="line">+-----+</span><br><span class="line">| sex |</span><br><span class="line">+-----+</span><br><span class="line">| 男  |</span><br><span class="line">+-----+</span><br><span class="line"></span><br><span class="line">-- 根据性别查询 name 和 sex</span><br><span class="line">SELECT name, sex FROM student WHERE sex = (</span><br><span class="line">    SELECT sex FROM student WHERE name = &#x27;李军&#x27;</span><br><span class="line">);</span><br><span class="line">+-----------+-----+</span><br><span class="line">| name      | sex |</span><br><span class="line">+-----------+-----+</span><br><span class="line">| 曾华      | 男  |</span><br><span class="line">| 匡明      | 男  |</span><br><span class="line">| 李军      | 男  |</span><br><span class="line">| 陆军      | 男  |</span><br><span class="line">| 王尼玛    | 男  |</span><br><span class="line">| 张全蛋    | 男  |</span><br><span class="line">| 赵铁柱    | 男  |</span><br><span class="line">| 张飞      | 男  |</span><br><span class="line">+-----------+-----+</span><br></pre></td></tr></table></figure><h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询 - 7"></a>子查询 - 7</h3><p><strong>查询和 “李军” 同性别且同班的同学 <code>name</code> 。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, sex, class FROM student WHERE sex = (</span><br><span class="line">    SELECT sex FROM student WHERE name = &#x27;李军&#x27;</span><br><span class="line">) AND class = (</span><br><span class="line">    SELECT class FROM student WHERE name = &#x27;李军&#x27;</span><br><span class="line">);</span><br><span class="line">+-----------+-----+-------+</span><br><span class="line">| name      | sex | class |</span><br><span class="line">+-----------+-----+-------+</span><br><span class="line">| 曾华      | 男  | 95033 |</span><br><span class="line">| 李军      | 男  | 95033 |</span><br><span class="line">| 王尼玛    | 男  | 95033 |</span><br><span class="line">+-----------+-----+-------+</span><br></pre></td></tr></table></figure><h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询 - 8"></a>子查询 - 8</h3><p><strong>查询所有选修 “计算机导论” 课程的 “男” 同学成绩表。</strong></p><p>需要的 “计算机导论” 和性别为 “男” 的编号可以在 <code>course</code> 和 <code>student</code> 表中找到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM score WHERE c_no = (</span><br><span class="line">    SELECT no FROM course WHERE name = &#x27;计算机导论&#x27;</span><br><span class="line">) AND s_no IN (</span><br><span class="line">    SELECT no FROM student WHERE sex = &#x27;男&#x27;</span><br><span class="line">);</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| s_no | c_no  | degree |</span><br><span class="line">+------+-------+--------+</span><br><span class="line">| 101  | 3-105 |     90 |</span><br><span class="line">| 102  | 3-105 |     91 |</span><br><span class="line">| 104  | 3-105 |     89 |</span><br><span class="line">| 109  | 3-105 |     76 |</span><br><span class="line">+------+-------+--------+</span><br></pre></td></tr></table></figure><h3 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h3><p>建立一个 <code>grade</code> 表代表学生的成绩等级，并插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE grade (</span><br><span class="line">    low INT(3),</span><br><span class="line">    upp INT(3),</span><br><span class="line">    grade char(1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO grade VALUES (90, 100, &#x27;A&#x27;);</span><br><span class="line">INSERT INTO grade VALUES (80, 89, &#x27;B&#x27;);</span><br><span class="line">INSERT INTO grade VALUES (70, 79, &#x27;C&#x27;);</span><br><span class="line">INSERT INTO grade VALUES (60, 69, &#x27;D&#x27;);</span><br><span class="line">INSERT INTO grade VALUES (0, 59, &#x27;E&#x27;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM grade;</span><br><span class="line">+------+------+-------+</span><br><span class="line">| low  | upp  | grade |</span><br><span class="line">+------+------+-------+</span><br><span class="line">|   90 |  100 | A     |</span><br><span class="line">|   80 |   89 | B     |</span><br><span class="line">|   70 |   79 | C     |</span><br><span class="line">|   60 |   69 | D     |</span><br><span class="line">|    0 |   59 | E     |</span><br><span class="line">+------+------+-------+</span><br></pre></td></tr></table></figure><p><strong>查询所有学生的 <code>s_no</code> 、<code>c_no</code> 和 <code>grade</code> 列。</strong></p><p>思路是，使用区间 ( <code>BETWEEN</code> ) 查询，判断学生的成绩 ( <code>degree</code> )  在 <code>grade</code> 表的 <code>low</code> 和 <code>upp</code> 之间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SELECT s_no, c_no, grade FROM score, grade </span><br><span class="line">WHERE degree BETWEEN low AND upp;</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| s_no | c_no  | grade |</span><br><span class="line">+------+-------+-------+</span><br><span class="line">| 101  | 3-105 | A     |</span><br><span class="line">| 102  | 3-105 | A     |</span><br><span class="line">| 103  | 3-105 | A     |</span><br><span class="line">| 103  | 3-245 | B     |</span><br><span class="line">| 103  | 6-166 | B     |</span><br><span class="line">| 104  | 3-105 | B     |</span><br><span class="line">| 105  | 3-105 | B     |</span><br><span class="line">| 105  | 3-245 | C     |</span><br><span class="line">| 105  | 6-166 | C     |</span><br><span class="line">| 109  | 3-105 | C     |</span><br><span class="line">| 109  | 3-245 | D     |</span><br><span class="line">| 109  | 6-166 | B     |</span><br><span class="line">+------+-------+-------+</span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>准备用于测试连接查询的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE testJoin;</span><br><span class="line"></span><br><span class="line">CREATE TABLE person (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    cardId INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE card (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO card VALUES (1, &#x27;饭卡&#x27;), (2, &#x27;建行卡&#x27;), (3, &#x27;农行卡&#x27;), (4, &#x27;工商卡&#x27;), (5, &#x27;邮政卡&#x27;);</span><br><span class="line">SELECT * FROM card;</span><br><span class="line">+------+-----------+</span><br><span class="line">| id   | name      |</span><br><span class="line">+------+-----------+</span><br><span class="line">|    1 | 饭卡      |</span><br><span class="line">|    2 | 建行卡    |</span><br><span class="line">|    3 | 农行卡    |</span><br><span class="line">|    4 | 工商卡    |</span><br><span class="line">|    5 | 邮政卡    |</span><br><span class="line">+------+-----------+</span><br><span class="line"></span><br><span class="line">INSERT INTO person VALUES (1, &#x27;张三&#x27;, 1), (2, &#x27;李四&#x27;, 3), (3, &#x27;王五&#x27;, 6);</span><br><span class="line">SELECT * FROM person;</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| id   | name   | cardId |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">|    1 | 张三   |      1 |</span><br><span class="line">|    2 | 李四   |      3 |</span><br><span class="line">|    3 | 王五   |      6 |</span><br><span class="line">+------+--------+--------+</span><br></pre></td></tr></table></figure><p>分析两张表发现，<code>person</code> 表并没有为 <code>cardId</code> 字段设置一个在 <code>card</code> 表中对应的 <code>id</code> 外键。如果设置了的话，<code>person</code> 中 <code>cardId</code> 字段值为 <code>6</code> 的行就插不进去，因为该 <code>cardId</code> 值在 <code>card</code> 表中并没有。</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>要查询这两张表中有关系的数据，可以使用 <code>INNER JOIN</code> ( 内连接 ) 将它们连接在一起。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。</span><br><span class="line">-- on: 表示要执行某个条件。</span><br><span class="line">SELECT * FROM person INNER JOIN card on person.cardId = card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line"></span><br><span class="line">-- 将 INNER 关键字省略掉，结果也是一样的。</span><br><span class="line">-- SELECT * FROM person JOIN card on person.cardId = card.id;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>card</code> 的整张表被连接到了右边。</p></blockquote><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>完整显示左边的表 ( <code>person</code> ) ，右边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的。</span><br><span class="line">SELECT * FROM person LEFT JOIN card on person.cardId = card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">|    3 | 王五   |      6 | NULL | NULL      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure><h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>完整显示右边的表 ( <code>card</code> ) ，左边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM person RIGHT JOIN card on person.cardId = card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    2 | 建行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    4 | 工商卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | 邮政卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure><h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>完整显示两张表的全部数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- MySQL 不支持这种语法的全外连接</span><br><span class="line">-- SELECT * FROM person FULL JOIN card on person.cardId = card.id;</span><br><span class="line">-- 出现错误：</span><br><span class="line">-- ERROR 1054 (42S22): Unknown column &#x27;person.cardId&#x27; in &#x27;on clause&#x27;</span><br><span class="line"></span><br><span class="line">-- MySQL全连接语法，使用 UNION 将两张表合并在一起。</span><br><span class="line">SELECT * FROM person LEFT JOIN card on person.cardId = card.id</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM person RIGHT JOIN card on person.cardId = card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">|    3 | 王五   |      6 | NULL | NULL      |</span><br><span class="line">| NULL | NULL   |   NULL |    2 | 建行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    4 | 工商卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | 邮政卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p><p>比如我们的银行转账：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- a -&gt; -100</span><br><span class="line">UPDATE user set money = money - 100 WHERE name = &#x27;a&#x27;;</span><br><span class="line"></span><br><span class="line">-- b -&gt; +100</span><br><span class="line">UPDATE user set money = money + 100 WHERE name = &#x27;b&#x27;;</span><br></pre></td></tr></table></figure><p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p><p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p><h3 id="如何控制事务-COMMIT-ROLLBACK"><a href="#如何控制事务-COMMIT-ROLLBACK" class="headerlink" title="如何控制事务 - COMMIT / ROLLBACK"></a>如何控制事务 - COMMIT / ROLLBACK</h3><p>在 MySQL 中，事务的<strong>自动提交</strong>状态默认是开启的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 查询事务的自动提交状态</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">+--------------+</span><br><span class="line">| @@AUTOCOMMIT |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p><strong>自动提交的作用</strong>：当我们执行一条 SQL 语句的时候，其产生的效果就会立即体现出来，且不能<strong>回滚</strong>。</p><p>什么是回滚？举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE bank;</span><br><span class="line"></span><br><span class="line">USE bank;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    money INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user VALUES (1, &#x27;a&#x27;, 1000);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>可以看到，在执行插入语句后数据立刻生效，原因是 MySQL 中的事务自动将它<strong>提交</strong>到了数据库中。那么所谓<strong>回滚</strong>的意思就是，撤销执行过的所有 SQL 语句，使其回滚到<strong>最后一次提交</strong>数据时的状态。</p><p>在 MySQL 中使用 <code>ROLLBACK</code> 执行回滚：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 回滚到最后一次提交</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>由于所有执行过的 SQL 语句都已经被提交过了，所以数据并没有发生回滚。那如何让数据可以发生回滚？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 关闭自动提交</span><br><span class="line">SET AUTOCOMMIT = 0;</span><br><span class="line"></span><br><span class="line">-- 查询自动提交状态</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">+--------------+</span><br><span class="line">| @@AUTOCOMMIT |</span><br><span class="line">+--------------+</span><br><span class="line">|            0 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p>将自动提交关闭后，测试数据回滚：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user VALUES (2, &#x27;b&#x27;, 1000);</span><br><span class="line"></span><br><span class="line">-- 关闭 AUTOCOMMIT 后，数据的变化是在一张虚拟的临时数据表中展示，</span><br><span class="line">-- 发生变化的数据并没有真正插入到数据表中。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 数据表中的真实数据其实还是：</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 由于数据还没有真正提交，可以使用回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 再次查询</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>那如何将虚拟的数据真正提交到数据库中？使用 <code>COMMIT</code> : </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user VALUES (2, &#x27;b&#x27;, 1000);</span><br><span class="line">-- 手动提交数据（持久性），</span><br><span class="line">-- 将数据真正提交到数据库中，执行后不能再回滚提交过的数据。</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 提交后测试回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 再次查询（回滚无效了）</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><blockquote><p><strong>总结</strong></p><ol><li><p><strong>自动提交</strong></p><ul><li><p>查看自动提交状态：<code>SELECT @@AUTOCOMMIT</code> ；</p></li><li><p>设置自动提交状态：<code>SET AUTOCOMMIT = 0</code> 。</p></li></ul></li><li><p><strong>手动提交</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>COMMIT</code> 命令提交事务。</p></li><li><p><strong>事务回滚</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>ROLLBACK</code> 命令回滚事务。</p></li></ol></blockquote><p><strong>事务的实际应用</strong>，让我们再回到银行转账项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 转账</span><br><span class="line">UPDATE user set money = money - 100 WHERE name = &#x27;a&#x27;;</span><br><span class="line"></span><br><span class="line">-- 到账</span><br><span class="line">UPDATE user set money = money + 100 WHERE name = &#x27;b&#x27;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>这时假设在转账时发生了意外，就可以使用 <code>ROLLBACK</code> 回滚到最后一次提交的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 假设转账发生了意外，需要回滚。</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>这时我们又回到了发生意外之前的状态，也就是说，事务给我们提供了一个可以反悔的机会。假设数据没有发生意外，这时可以手动将数据真正提交到数据表中：<code>COMMIT</code> 。</p><h3 id="手动开启事务-BEGIN-START-TRANSACTION"><a href="#手动开启事务-BEGIN-START-TRANSACTION" class="headerlink" title="手动开启事务 - BEGIN / START TRANSACTION"></a>手动开启事务 - BEGIN / START TRANSACTION</h3><p>事务的默认提交被开启 ( <code>@@AUTOCOMMIT = 1</code> ) 后，此时就不能使用事务回滚了。但是我们还可以手动开启一个事务处理事件，使其可以发生回滚：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务</span><br><span class="line">-- START TRANSACTION;</span><br><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money = money - 100 WHERE name = &#x27;a&#x27;;</span><br><span class="line">UPDATE user set money = money + 100 WHERE name = &#x27;b&#x27;;</span><br><span class="line"></span><br><span class="line">-- 由于手动开启的事务没有开启自动提交，</span><br><span class="line">-- 此时发生变化的数据仍然是被保存在一张临时表中。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 测试回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money = money - 100 WHERE name = &#x27;a&#x27;;</span><br><span class="line">UPDATE user set money = money + 100 WHERE name = &#x27;b&#x27;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 提交数据</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 测试回滚（无效，因为表的数据已经被提交）</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><h3 id="事务的-ACID-特征与使用"><a href="#事务的-ACID-特征与使用" class="headerlink" title="事务的 ACID 特征与使用"></a>事务的 ACID 特征与使用</h3><p><strong>事务的四大特征：</strong></p><ul><li><strong>A 原子性</strong>：事务是最小的单位，不可以再分割；</li><li><strong>C 一致性</strong>：要求同一事务中的 SQL 语句，必须保证同时成功或者失败；</li><li><strong>I 隔离性</strong>：事务1 和 事务2 之间是具有隔离性的；</li><li><strong>D 持久性</strong>：事务一旦结束 ( <code>COMMIT</code> ) ，就不可以再返回了 ( <code>ROLLBACK</code> ) 。</li></ul><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><p>查看当前数据库的默认隔离级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">SELECT @@TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                | -- MySQL的默认隔离级别，可以重复读。</span><br><span class="line">+--------------------------------+</span><br><span class="line"></span><br><span class="line">-- MySQL 5.x</span><br><span class="line">SELECT @@GLOBAL.TX_ISOLATION;</span><br><span class="line">SELECT @@TX_ISOLATION;</span><br></pre></td></tr></table></figure><p>修改隔离级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。</span><br><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"></span><br><span class="line">-- 查询系统隔离级别，发现已经被修改。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-UNCOMMITTED               |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>测试 <strong>READ UNCOMMITTED ( 读取未提交 )</strong> 的隔离性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user VALUES (3, &#x27;小明&#x27;, 1000);</span><br><span class="line">INSERT INTO user VALUES (4, &#x27;淘宝店&#x27;, 1000);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 开启一个事务操作数据</span><br><span class="line">-- 假设小明在淘宝店买了一双800块钱的鞋子：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money = money - 800 WHERE name = &#x27;小明&#x27;;</span><br><span class="line">UPDATE user SET money = money + 800 WHERE name = &#x27;淘宝店&#x27;;</span><br><span class="line"></span><br><span class="line">-- 然后淘宝店在另一方查询结果，发现钱已到账。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 小明所处的事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 此时无论对方是谁，如果再去查询结果就会发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p><h4 id="读取已提交"><a href="#读取已提交" class="headerlink" title="读取已提交"></a>读取已提交</h4><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-COMMITTED                 |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 正在操作数据事务（当前事务）</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money = money - 800 WHERE name = &#x27;小明&#x27;;</span><br><span class="line">UPDATE user SET money = money + 800 WHERE name = &#x27;淘宝店&#x27;;</span><br><span class="line"></span><br><span class="line">-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，</span><br><span class="line">-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 假设此时在远程开启了一个新事务，连接到数据库。</span><br><span class="line">$ mysql -u root -p12345612</span><br><span class="line"></span><br><span class="line">-- 此时远程连接查询到的数据只能是已经提交过的</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-- 小张在查询数据的时候发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 在小张求表的 money 平均值之前，小王做了一个操作：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO user VALUES (5, &#x27;c&#x27;, 100);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 此时表的真实数据是：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：</span><br><span class="line">SELECT AVG(money) FROM user;</span><br><span class="line">+------------+</span><br><span class="line">| AVG(money) |</span><br><span class="line">+------------+</span><br><span class="line">|  820.0000  |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。</strong>这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小王 - 北京</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小张 - 成都</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p><p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> money <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> a         <span class="operator">|</span>   <span class="number">900</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> b         <span class="operator">|</span>  <span class="number">1100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 小明      <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 淘宝店    <span class="operator">|</span>  <span class="number">1000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> c         <span class="operator">|</span>   <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+-------+</span></span><br></pre></td></tr></table></figure><p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) <strong>，那么</strong>在他的这条新事务的线上，跟其他事务是没有联系的</strong>，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p><p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">-- ERROR 1062 (23000): Duplicate entry &#x27;6&#x27; for key &#x27;PRIMARY&#x27;</span></span><br></pre></td></tr></table></figure><p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| SERIALIZABLE                   |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>还是拿小张和小王来举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 小张 - 成都</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 小王 - 北京</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 开启事务之前先查询表，准备操作数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">|  6 | d         |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 发现没有 7 号王小花，于是插入一条数据：</span><br><span class="line">INSERT INTO user VALUES (7, &#x27;王小花&#x27;, 1000);</span><br></pre></td></tr></table></figure><p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p><p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p><p>除开null</p><p>select name from customer where ifnull(referee_id, 0)&lt;&gt; 2</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2023/02/10/%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/02/10/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程包括以下这几个状态：</p><p>创建(new)、就绪(runnable)、运行(running)、阻塞(blocked)、time waiting（睡眠或等待一定的事件）、waiting（等待被唤醒）、消亡（dead）</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/682616-20161115183635779-1231872003.jpg" alt="img" style="zoom: 67%;" /><p>注意点：</p><p>1、当线程进入就绪状态后，不代表立刻就能获取CPU执行时间</p><p>2、如果调用了sleep方法，必须捕获InterruptedException异常或者将该异常向上层抛出。当线程睡眠时间满后，不一定会立即得到执行，因为此时可能CPU正在执行其他的任务。所以说调用sleep方法相当于让线程进入阻塞状态。</p><p>3、调用yield方法并不会让线程进入阻塞状态，而是让线程<strong>重回就绪</strong>状态，它只需要等待重新获取CPU执行时间，这一点是和sleep方法不一样的。</p><p>4、wait方法会让线程进入阻塞状态，并且会释放线程占有的锁，并交出CPU执行权限。</p><p>5、调用join方法实际上是调用了Object的wait方法。由于wait方法会让线程释放对象锁，所以join方法同样会让线程释放对一个对象持有的锁。</p><h3 id="Thread类中常用的方法："><a href="#Thread类中常用的方法：" class="headerlink" title="Thread类中常用的方法："></a>Thread类中常用的方法：</h3><p>以下是关系到线程 <em>运行状态</em> 的几个方法：</p><p>1）start方法</p><p>start()用来启动一个线程，当调用start方法后，系统才会开启一个新的线程来执行用户定义的子任务，在这个过程中，会为相应的线程分配需要的资源。</p><p>2）run方法</p><p>run()方法是不需要用户来调用的，当通过start方法启动一个线程之后，当线程获得了CPU执行时间，便进入run方法体去执行具体的任务。注意<strong>，继承Thread类必须重写run方法</strong>，在run方法中定义具体要执行的任务。</p><p>3）sleep方法</p><p>sleep方法有两个重载版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sleep(long millis)     //参数为毫秒</span><br><span class="line">sleep(long millis,int nanoseconds)    //第一参数为毫秒，第二个参数为纳秒</span><br></pre></td></tr></table></figure><p>sleep相当于让线程睡眠，交出CPU，让CPU去执行其他的任务。</p><p>但是有一点要非常注意，sleep方法不会释放锁，也就是说如果当前线程持有对某个对象的锁，则即使调用sleep方法，其他线程也无法访问这个对象。</p><p>4）yield方法</p><p>调用yield方法会让<strong>当前线程交出CPU权限</strong>，让CPU去执行其他的线程。它跟sleep方法类似，同样<strong>不会释放锁</strong>。但是yield不能控制具体的交出CPU的时间，另外，yield方法只能让<u>拥有相同优先级的线程</u>有获取CPU执行时间的机会。</p><p>5）join方法</p><p>join方法有三个重载版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">join()</span><br><span class="line">join(long millis)     //参数为毫秒</span><br><span class="line">join(long millis,int nanoseconds)    //第一参数为毫秒，第二个参数为纳秒</span><br></pre></td></tr></table></figure><p>假如在main线程中，调用thread.join方法，则main方法会等待thread线程执行完毕或者等待一定的时间。如果调用的是无参join方法，则等待thread执行完毕，如果调用的是指定了时间参数的join方法，则等待一定的事件。</p><p>6）interrupt方法</p><p>单独调用interrupt方法可以使得处于阻塞状态的线程抛出一个异常，可以用来中断一个正处于阻塞状态的线程；另外，通过interrupt方法和isInterrupted()方法来停止正在运行的线程。</p><p>直接调用interrupt方法可以中断处于阻塞状态的线程，但不能中断正在运行中的线程。</p><p>如果配合isInterrupted()能够中断正在运行的线程，因为调用interrupt方法相当于将中断标志位置为true，那么可以通过调用isInterrupted()判断中断标志是否被置位来中断线程的执行。</p><p>7）stop方法</p><p>stop方法已经是一个废弃的方法，它是一个不安全的方法。因为调用stop方法会直接终止run方法的调用，并且会抛出一个ThreadDeath错误，如果线程持有某个对象锁的话，会完全释放锁，导致对象状态不一致。所以stop方法基本是不会被用到的。</p><p>8）destroy方法</p><p>destroy方法也是废弃的方法。基本不会被使用到。</p><h3 id="以下是关系到线程属性的几个方法"><a href="#以下是关系到线程属性的几个方法" class="headerlink" title="以下是关系到线程属性的几个方法:"></a>以下是关系到线程属性的几个方法:</h3><p>1）getId</p><p>用来得到线程ID</p><p>2）getName和setName</p><p>用来得到或者设置线程名称。</p><p>3）getPriority和setPriority</p><p>用来获取和设置线程优先级。</p><p>4）setDaemon和isDaemon</p><p>用来设置线程是否成为守护线程和判断线程是否是守护线程。</p><p>​    守护线程和用户线程的区别在于：</p><p>​    守护线程依赖于创建它的线程，而用户线程则不依赖。</p><p>​    举个简单的例子：如果在main线程中创建了一个守护线程，当main方法运行完毕之后，守护线程也会随着消亡。而用户线程则不会，用户线程会一直运行直到其运行完毕。在JVM中，像垃圾收集器线程就是守护线程。</p><p>5）public final boolean isAlive()<br>测试线程是否处于活动状态。</p><p>6）public static void yield()<br>暂停当前正在执行的线程对象，并执行其他线程</p><p>7）currentThread()</p><p>用来获取当前线程</p><h3 id="sleep-和-wait-方法解释"><a href="#sleep-和-wait-方法解释" class="headerlink" title="sleep 和 wait 方法解释"></a>sleep 和 wait 方法解释</h3><p>sleep()方法是Thread类里面的，主要的意义就是让当前线程停止执行，让出cpu给其他的线程，但是不会释放对象锁资源以及监控的状态，当指定的时间到了之后又会自动恢复运行状态。</p><p>wait()方法是Object类里面的，主要的意义就是让线程放弃当前的对象的锁，进入等待此对象的等待锁定池，只有针对此对象调动notify方法后本线程才能够进入对象锁定池准备获取对象锁进入运行状态。</p><h3 id="start-和-run-方法解释"><a href="#start-和-run-方法解释" class="headerlink" title="start 和 run 方法解释"></a><strong>start 和 run 方法解释</strong></h3><p>1、start：用start方法来启动线程，真正实现了多线程运行，这时<u>无需等待run方法体代码执行完毕而直接继续执行下面的代码</u>。</p><p>通过调用Thread类的start()方法来启动一个线程，这时此线程处于<strong>就绪（可运行）</strong>状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里方法 run()称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。<br>2、run： run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然<strong>只有主线程</strong>这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。</p><p>总结：调用start方法方可启动线程，而run方法只是thread的一个普通方法调用，还是在主线程里执行。这两个方法应该都比较熟悉，把需要并行处理的代码放在run()方法中，start()方法启动线程将自动调用 run()方法，这是由jvm的内存机制规定的。并且run()方法必须是public访问权限，返回值类型为void。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/716271-20170320112245721-1831918220.jpg" alt="img" style="zoom:67%;" /><h2 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h2><p>Java 提供了三种创建线程的方法：</p><ul><li>通过实现 Runnable 接口；</li><li>通过继承 Thread 类本身；</li><li>通过 Callable 和 Future 创建线程。</li></ul><p><strong>实现并启动线程有两种方法</strong><br>1、写一个类继承自Thread类，重写run方法。用start方法启动线程<br>2、写一个类实现Runnable接口，实现run方法。用new Thread(Runnable target).start()方法来启动</p><p><strong>多线程原理：</strong></p><p><strong>多线程就是分时利用CPU，宏观上让所有线程一起执行 ，也叫并发</strong></p><p>相当于玩游戏机，只有一个游戏机（cpu），可是有很多人要玩，于是，start是排队！等CPU选中你就是轮到你，你就run（），当CPU的运行的时间片执行完，这个线程就继续排队，等待下一次的run（）</p><h3 id="通过实现-Runnable-接口来创建线程"><a href="#通过实现-Runnable-接口来创建线程" class="headerlink" title="通过实现 Runnable 接口来创建线程"></a>通过实现 Runnable 接口来创建线程</h3><p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p><p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。</p><p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。</p><p>Thread 定义了几个构造方法，下面的这个是我们经常使用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread(Runnable threadOb,String threadName);</span><br></pre></td></tr></table></figure><p>这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。</p><p>新线程创建之后，你调用它的 start() 方法它才会运行。</p><h3 id="通过继承Thread来创建线程"><a href="#通过继承Thread来创建线程" class="headerlink" title="通过继承Thread来创建线程"></a>通过继承Thread来创建线程</h3><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p><p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p><p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p><h3 id="通过-Callable-和-Future-创建线程"><a href="#通过-Callable-和-Future-创建线程" class="headerlink" title="通过 Callable 和 Future 创建线程"></a>通过 Callable 和 Future 创建线程</h3><ul><li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li><li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li><li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li><li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ul><h2 id="创建线程的三种方式的对比"><a href="#创建线程的三种方式的对比" class="headerlink" title="创建线程的三种方式的对比"></a>创建线程的三种方式的对比</h2><ul><li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li><li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2023/02/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/02/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left"><strong>[ABC]</strong></td><td align="left">匹配 <strong>[…]</strong> 中的所有字符<img src="https://www.runoob.com/wp-content/uploads/2014/03/E691DDE1-E5CB-4EA8-8D16-759BD0D2B09D.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp5">尝试一下 »</a></td></tr><tr><td align="left"><strong>[^ABC]</strong></td><td align="left">匹配除了 <strong>[…]</strong> 中字符的所有字符，<img src="https://www.runoob.com/wp-content/uploads/2014/03/ED971D92-30F4-4768-A2C7-02A84A3A9DEB.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp6">尝试一下 »</a></td></tr><tr><td align="left"><strong>[A-Z]</strong></td><td align="left">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。<img src="https://www.runoob.com/wp-content/uploads/2014/03/C5E357BD-65E3-4EB3-9D80-10D096F19287.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp7">尝试一下 »</a></td></tr><tr><td align="left"><strong>.</strong></td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。<img src="https://www.runoob.com/wp-content/uploads/2014/03/0FD7E77D-38A7-43BC-B51A-7DBA23A77756.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp8">尝试一下 »</a></td></tr><tr><td align="left"><strong>[\s\S]</strong></td><td align="left">匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。<img src="https://www.runoob.com/wp-content/uploads/2014/03/47CA6C59-64CF-433A-909E-1E342349A4E0.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp9">尝试一下 »</a></td></tr><tr><td align="left"><strong>\w</strong></td><td align="left">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<img src="https://www.runoob.com/wp-content/uploads/2014/03/F35A5971-3519-4CAE-8BEC-9DE8F4A55257.jpg" alt="img"  /></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp10">尝试一下 »</a></td></tr></tbody></table><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\cx</td><td align="left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong>runoo*b</strong> 中的 *****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 ***** 符号，则需要对 ***** 进行转义，即在其前加一个 <em>***，**runo*ob</em>* 匹配字符串 <strong>runo*ob</strong>。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*<em>*</em> 放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th align="left">特别字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td align="left">( )</td><td align="left">标记一个<u>子表达式</u>的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式<strong>零次或多次</strong>。要匹配 * 字符，请使用 *。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式<strong>一次或多次</strong>。要匹配 + 字符，请使用 +。</td></tr><tr><td align="left">.</td><td align="left">匹配<strong>除换行符 \n 之外</strong>的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td align="left">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式<strong>零次或一次</strong>，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td align="left">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td align="left">{</td><td align="left">标记<u>限定符表达式</u>的开始。要匹配 {，请使用 {。</td></tr><tr><td align="left">|</td><td align="left">指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="left">\B</td><td align="left">非单词边界匹配。</td></tr></tbody></table><p>\b单词边界元字符确保只检测整个单词。否则，诸如 “is issued” 或 “this is” 之类的词组将不能正确地被此表达式识别。</p><p> \i 标记指定不区分大小写。</p><p>全局标记 \g 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配</p><p>多行标记 \m 指定换行符的两边可能出现潜在的匹配。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。</p><p><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n位的数字：<strong>^\d{n}$</strong></li><li>至少n位的数字<strong>：^\d{n,}$</strong></li><li>m-n位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li><li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li></ul><hr><h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&amp;’,;=?$&quot;等字符：**[^%&amp;’,;=?$\x22]+**</li><li>禁止输入含有<del>的字符：**[^</del>]+**</li></ul><hr><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ul><li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li><li>域名：**[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?**</li><li>InternetURL：**[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$**</li><li>手机号码：<strong>^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：**(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)**</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li><li>中文字符的正则表达式：**[\u4e00-\u9fa5]**</li><li>双字节字符：**[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))**</li><li>空白行的正则表达式：<strong>\n\s*\r (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式：**&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)**</li><li>腾讯QQ号：**[1-9][0-9]{4,} (腾讯QQ号从10000开始)**</li><li>中国邮政编码：**[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)**</li><li>IPv4地址：**((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}**</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket</title>
      <link href="/2023/02/10/Socket/"/>
      <url>/2023/02/10/Socket/</url>
      
        <content type="html"><![CDATA[<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p><strong>TCP/IP、UDP</strong></p><ol><li><p>TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。</p></li><li><p>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20190718154523875.png" style="zoom:80%;" /><p><strong>Socket是什么呢？</strong></p><pre><code>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。</code></pre><p>在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20190718154556909.png" alt="img"  /><p>先从服务器端说起。</p><p>服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。</p><p>在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)</p><p>如果连接成功，这时客户端与服务器端的连接就建立了。</p><p>客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p><h1 id="1、网络中进程之间如何通信？"><a href="#1、网络中进程之间如何通信？" class="headerlink" title="1、网络中进程之间如何通信？"></a>1、网络中进程之间如何通信？</h1><p>本地的进程间通信（IPC）有很多种方式，但可以总结为下面4类：</p><ul><li>消息传递（管道、FIFO、消息队列）</li><li>同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）</li><li>共享内存（匿名的和具名的）</li><li>远程过程调用（Solaris门和Sun RPC）</li></ul><p>本地可以通过进程PID来唯一标识一个进程，但是在网络中这是行不通的。</p><p>其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“<strong>ip地址</strong>”可以唯一标识网络中的主机，而传输层的“<strong>协议+端口</strong>”可以唯一标识主机中的应用程序（进程）。</p><p>利用三元组（ip地址，协议，端口）就可以标识网络的进程了。</p><h1 id="2、socket的基本操作"><a href="#2、socket的基本操作" class="headerlink" title="2、socket的基本操作"></a>2、socket的基本操作</h1><p>socket是“open—write/read—close”模式的一种实现，socket提供了这些操作对应的函数接口。下面以TCP为例，介绍几个基本的socket接口函数。</p><h2 id="2-1、socket-函数"><a href="#2-1、socket-函数" class="headerlink" title="2.1、socket()函数"></a>2.1、socket()函数</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> socket(<span class="keyword">int</span> domain, <span class="keyword">int</span> <span class="built_in">type</span>, <span class="keyword">int</span> protocol);</span><br></pre></td></tr></table></figure><p>socket函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字</p><p>而<strong>socket()<strong>用于创建一个socket描述符（</strong>socket descriptor</strong>），它唯一标识一个socket。</p><p>这个socket描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。</p><p>正如可以给fopen的传入不同参数值，以打开不同的文件。创建socket的时候，也可以指定不同的参数创建不同的socket描述符，socket函数的三个参数分别为：</p><ul><li><p><strong>domain</strong>：即<strong>协议域</strong>，又称为协议族（family）。</p><p>常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。</p><p>协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。</p></li><li><p><strong>type</strong>：指定socket<strong>类型</strong>。</p><p>常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等。</p></li><li><p><strong>protocol</strong>：故名思意，就是<strong>指定协议</strong>。</p><p>常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议</p></li></ul><p>注意：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。当protocol为0时，会自动选择type类型对应的默认协议。</p><p>当我们调用<strong>socket</strong>创建一个socket时，返回的socket描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用bind()函数，否则就当调用connect()、listen()时系统会自动随机分配一个端口。</p><h2 id="2-2、bind-函数"><a href="#2-2、bind-函数" class="headerlink" title="2.2、bind()函数"></a>2.2、bind()函数</h2><p>正如上面所说bind()函数把一个地址族中的特定地址赋给socket。</p><p>例如对应AF_INET、AF_INET6就是把一个ipv4或ipv6地址和端口号组合赋给socket。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bind(<span class="keyword">int</span> sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br></pre></td></tr></table></figure><p>函数的三个参数分别为：</p><ul><li><p>sockfd：即socket描述字，它是通过socket()函数创建，唯一标识一个socket。<strong>bind()函数就是将给这个描述字绑定一个名字</strong></p></li><li><p>addr：一个const struct sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同，如ipv4对应的是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> &#123;</span><br><span class="line">    <span class="type">sa_family_t</span>    sin_family; </span><br><span class="line">    <span class="type">in_port_t</span>      sin_port;   </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">in_addr</span> sin_addr;   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">in_addr</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span>       s_addr;     </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ipv6对应的是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in6</span> &#123; </span><br><span class="line">    <span class="type">sa_family_t</span>     sin6_family;    </span><br><span class="line">    <span class="type">in_port_t</span>       sin6_port;      </span><br><span class="line">    <span class="type">uint32_t</span>        sin6_flowinfo;  </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">in6_addr</span> sin6_addr;      </span><br><span class="line">    <span class="type">uint32_t</span>        sin6_scope_id;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">in6_addr</span> &#123; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>   s6_addr[<span class="number">16</span>];    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Unix域对应的是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> UNIX_PATH_MAX    108</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_un</span> &#123; </span><br><span class="line">    <span class="type">sa_family_t</span> sun_family;                </span><br><span class="line">    <span class="type">char</span>        sun_path[UNIX_PATH_MAX];   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>通常服务器在启动的时候都会绑定一个众所周知的地址（如ip地址+端口号），用于提供服务，客户就可以通过它来接连服务器；</p><p>而客户端就不用指定，有系统自动分配一个端口号和自身的ip地址组合。</p><p>这就是为什么通常服务器端在listen之前会调用bind()，而客户端就不会调用，而是在connect()时由系统随机生成一个。</p><h3 id="网络字节序与主机字节序"><a href="#网络字节序与主机字节序" class="headerlink" title="网络字节序与主机字节序"></a>网络字节序与主机字节序</h3><p><strong>主机字节序</strong></p><p>就是我们平常说的大端和小端模式：不同的CPU有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。</p><p>　　a) Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。高高低低——小端</p><p>　　b) Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</p><p><strong>网络字节序</strong>：</p><p>4个字节的32 bit值以下面的次序传输：首先是0～7bit，其次8～15bit，然后16～23bit，最后是24~31bit。</p><p>即大端字节序。<strong>由于TCP/IP首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。</strong></p><p>字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。</p><p>所以： 在将一个地址绑定到socket的时候，请<strong>先将主机字节序转换成为网络字节序</strong>，将其转化为网络字节序再赋给socket。</p><h2 id="2-3、listen-、connect-函数"><a href="#2-3、listen-、connect-函数" class="headerlink" title="2.3、listen()、connect()函数"></a>2.3、listen()、connect()函数</h2><p>如果作为一个服务器，在调用socket()、bind()之后就会调用listen()来监听这个socket</p><p>如果客户端这时调用connect()发出连接请求，服务器端就会接收到这个请求。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">listen</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> backlog)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>listen函数的第一个参数即为要监听的socket描述字，第二个参数为相应socket可以排队的<strong>最大连接个数</strong>。socket()函数创建的socket默认是一个主动类型的，listen函数将socket变为<strong>被动类型的，等待客户的连接请求</strong>。</p><p>connect函数的第一个参数即为客户端的socket描述字，第二参数为服务器的socket地址，第三个参数为socket地址的长度。客户端通过调用connect函数来建立与TCP服务器的连接。</p><h2 id="2-4、accept-函数"><a href="#2-4、accept-函数" class="headerlink" title="2.4、accept()函数"></a>2.4、accept()函数</h2><p>TCP服务器端依次调用socket()、bind()、listen()之后，就会监听指定的socket地址了。</p><p>TCP客户端依次调用socket()、connect()之后就想TCP服务器发送了一个连接请求。</p><p>TCP服务器监听到这个请求之后，就会调用accept()函数取接收请求，这样连接就建立好了。</p><p>之后就可以开始网络I/O操作了，即类同于普通文件的读写I/O操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">accept</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>accept函数的第一个参数为服务器的socket描述字，第二个参数为指向struct sockaddr *的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。</p><p>如果accpet成功，那么其返回值是<strong>由内核自动生成的一个全新的描述字</strong>，代表与返回客户的TCP连接。</p><p>注意：accept的第一个参数为服务器的socket描述字，是服务器开始调用socket()函数生成的，称为<strong>监听socket描述字</strong>；而accept函数返回的是已连接的socket描述字。一个服务器通常通常仅仅只创建一个监听socket描述字，<strong>它在该服务器的生命周期内一直存在</strong>。内核为每个由服务器进程接受的客户连接创建了一个已连接socket描述字，当服务器完成了对某个客户的服务，相应的已连接socket描述字就被关闭。</p><h2 id="2-5、read-、write-等函数"><a href="#2-5、read-、write-等函数" class="headerlink" title="2.5、read()、write()等函数"></a>2.5、read()、write()等函数</h2><p>至此服务器与客户已经建立好连接了。可以调用网络I/O进行读写操作了，即实现了网咯中不同进程之间的通信。</p><p>网络I/O操作有下面几组：</p><ul><li>read()/write()</li><li>recv()/send()</li><li>readv()/writev()</li><li>recvmsg()/sendmsg()</li><li>recvfrom()/sendto()</li></ul><p>推荐使用recvmsg()/sendmsg()函数，这两个函数是最通用的I/O函数</p><p>实际上可以把上面的其它函数都替换成这两个函数。它们的声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span></span>;</span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">send</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">recv</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">sendto</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="type">const</span> <span class="keyword">struct</span> sockaddr *dest_addr, <span class="type">socklen_t</span> addrlen)</span></span>;</span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">recvfrom</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span> *buf, <span class="type">size_t</span> len, <span class="type">int</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">struct</span> sockaddr *src_addr, <span class="type">socklen_t</span> *addrlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">sendmsg</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> msghdr *msg, <span class="type">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">recvmsg</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> msghdr *msg, <span class="type">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>read函数是负责从fd中读取内容。</p><p>​    当读成功时，read返回实际所读的字节数，如果返回的值是0表示已经读到文件的结束了，小于0表示出现了错误。</p><p>​    如果错误为EINTR说明读是由中断引起的，如果是ECONNREST表示网络连接出了问题。</p><p>write函数将buf中的nbytes字节内容写入文件描述符fd。</p><p>​    成功时返回写的字节数。失败时返回-1，并设置errno变量。</p><p>在网络程序中，当我们向套接字文件描述符写时有俩种可能。</p><p>​    1)write的返回值大于0，表示写了部分或者是 全部的数据。</p><p>​    2)返回的值小于0，此时出现了错误。</p><p>​    如果错误为EINTR表示在写的时候出现了中断错误。如果为EPIPE表示 网络连接出现了问题(对方已经关闭了连接)。</p><h2 id="2-6、close-函数"><a href="#2-6、close-函数" class="headerlink" title="2.6、close()函数"></a>2.6、close()函数</h2><p>完成了读写操作就要关闭相应的socket描述字，好比操作完打开的文件要调用fclose关闭打开的文件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">close</span><span class="params">(<span class="type">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure><p>close一个TCP socket的缺省行为时把该socket标记为已关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为read或write的第一个参数。</p><p>注意：close操作只是使相应socket描述字的引用计数-1，只有当引用计数为0的时候，才会触发TCP客户端向服务器发送终止连接请求。</p><h1 id="3、socket中TCP的三次握手建立连接详解"><a href="#3、socket中TCP的三次握手建立连接详解" class="headerlink" title="3、socket中TCP的三次握手建立连接详解"></a>3、socket中TCP的三次握手建立连接详解</h1><p>tcp建立连接要进行“三次握手”，即交换三个分组。大致流程如下：</p><ul><li>客户端向服务器发送一个SYN J</li><li>服务器向客户端响应一个SYN K，并对SYN J进行确认ACK J+1</li><li>客户端再想服务器发一个确认ACK K+1</li></ul><p>只有就完了三次握手，但是这个三次握手发生在socket的那几个函数中呢？请看下图：</p><p><a href="http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157467258.png"><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20vc2t5bmV0LzIwMTAxMi8yMDEwMTIxMjIxNTc0NzYyODYucG5n" alt="image"></a></p><p>socket中发送的TCP三次握手</p><ul><li>当客户端调用connect时，触发了连接请求，向服务器发送了SYN J包，这时connect进入阻塞状态；</li><li>服务器监听到连接请求，即收到SYN J包，调用accept函数接收请求向客户端发送SYN K ，ACK J+1，这时accept进入阻塞状态；</li><li>客户端收到服务器的SYN K ，ACK J+1之后，这时connect返回，并对SYN K进行确认；</li><li>服务器收到ACK K+1时，accept返回，至此三次握手完毕，连接建立。</li></ul><h1 id="4、socket中TCP的四次握手释放连接详解"><a href="#4、socket中TCP的四次握手释放连接详解" class="headerlink" title="4、socket中TCP的四次握手释放连接详解"></a>4、socket中TCP的四次握手释放连接详解</h1><p>上面介绍了socket中TCP的三次握手建立过程，及其涉及的socket函数。</p><p>现在介绍socket中的四次握手释放连接的过程</p><p><a href="http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157487616.png"><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20vc2t5bmV0LzIwMTAxMi8yMDEwMTIxMjIxNTc0OTQ2OTMucG5n" alt="image"></a></p><p>socket中发送的TCP四次握手</p><ul><li><p>某个应用进程首先调用close主动关闭连接，这时TCP发送一个FIN M；</p></li><li><p>另一端接收到FIN M之后，执行被动关闭，对这个FIN进行确认。它的接收也作为文件结束符传递给应用进程，因为FIN的接收意味着应用进程在相应的连接上再也接收不到额外数据；</p></li><li><p>一段时间之后，接收到文件结束符的应用进程调用close关闭它的socket。这导致它的TCP也发送一个FIN N；</p></li><li><p>接收到这个FIN的源发送端TCP对它进行确认。</p><p>这样每个方向上都有一个FIN和ACK。</p></li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20190718155008892.png" alt="img"></p></li></ol><p>小明住在上海市长江路幸福小区5#666，现在小明在京东上面买了一部小米10Pro。京东在接到小米的订单后，工作人员从仓库中找到一部小米10Pro（应用层）。工作人员将手机打包好， 交给了京东物流（传输层）。接下来手机就到了转运中心（路由器），转运中心根据时间，成本等一系列因素决定下一步该发往哪一个转运中心(网络层)。决定好接下来发往哪一个转运中心后就开始用货车运输了，那么运输的过程就是数据链路层了，链路层负责将数据从一个端点送到另一个端点。那么货车行驶的道路就是物理层。几经周转，手机安全地送到了小明手上。</p><p>我们将一个小区比作一台计算机，一台计算机里面跑了很多程序，怎么区分程序呢，用的是端口，就好像小区用门牌号区分每一户人家一样。手机送到小明家了，怎么进去呢？从大门进啊，怎么找到大门呢？门牌号呀。不就相当于从互联网来的数据找到接收端计算机后再根据端口判断应该给哪一个程序一样吗。小明家的入口就可以用小区地址+门牌号进行唯一表示，那么同样的道理，程序也可以用IP+端口号进行唯一标识。那么这个程序的入口就被称作Socket。</p>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存</title>
      <link href="/2023/02/10/%E7%BC%93%E5%AD%98/"/>
      <url>/2023/02/10/%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>缓存是将==请求的结果==存储在与<strong>原始存储位置</strong>或<strong>临时存储位置</strong>不同的位置的过程，可以避免重复执行相同的操作。<br>基本上，缓存是文件和数据的==临时存储==，从这个新位置访问数据会更快。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>Web浏览器缓存HTML、CSS、JS和图像，以便在再次请求时更快的访问网站。 </li><li>==CDN存储静态文件==，有助于减少延迟。</li><li>DNS用于获取查询的IP地址，查询结果可以存储在缓存中，因此当我们多次请求IP地址时，==不必再次执行DNS查询==，从而可以更快的访问网页。<h2 id="回收机制（Eviction-policy）"><a href="#回收机制（Eviction-policy）" class="headerlink" title="回收机制（Eviction policy）"></a>回收机制（Eviction policy）</h2>当缓存用完时，需要删除旧缓存项，从而可以缓存新内容。事实上，删除最近最少使用的对象是最流行的方法之一，这个解决方案可以优化缓存中命中请求资源的概率。</li><li><strong>随机替换（RR，Random Replacement）</strong>：正如其字面意思，我们可以随机删除一个条目。</li><li><strong>最少使用次数（LFU，Least frequently used）</strong>：记录一个条目被请求的频率，并删除最不频繁使用的条目。</li><li><strong>最近最少使用（LRU，Least Recently Used）</strong>：在LRU中，删除最近使用次数最少的条目。</li><li><strong>先入先出（FIFO，First In First Out）</strong>：FIFO算法保存对象加载到缓存中的顺序。如果缓存没有命中，从头部取出一个或多个对象，并将一个新的缓存对象插入到队尾。如果缓存命中，保持缓存不变。</li></ul><h2 id="不同的缓存方法"><a href="#不同的缓存方法" class="headerlink" title="不同的缓存方法"></a>不同的缓存方法</h2><ol><li><strong>应用服务器缓存（Application server cache）</strong>：我们可以==直接在应用层==缓存数据。每次向服务发出请求时，如果存在缓存的本地数据，可以快速返回。如果不在缓存中，将从数据库查询数据。</li><li><strong>全局缓存（Global caches）</strong>：在全局缓存中，==所有节点使用相同的单一缓存空间==，每个应用节点以与本地节点相同的方式查询缓存。</li><li><strong>分布式缓存（Distributed cache）</strong>：通常使用==一致性哈希算法==分割缓存数据，==每个节点都拥有部分缓存数据==。如果请求节点正在搜索某一段数据，那么可以很容易的使用哈希函数从分布式缓存中定位信息，以确定数据是否可用。</li><li><strong>内容分发网络（CDN，Content Distribution Network）</strong>:如果我们正在开发的框架还没有大到足以拥有自己的CDN，而我们的页面又需要大量静态媒体，那么租用CDN是最好的选择。使用像apache这样的轻量级HTTP服务器，可以为不同的子域（如“blog.enjoyalgorithms.com”）提供静态媒体服务，并将DNS从我们的服务器切到CDN层。</li><li><strong>客户端缓存（Client-Side Caches）</strong>：客户端缓存直接在浏览器或其他客户端（例如中间网络缓存）中缓存以前请求的文件数据。</li><li><strong>ISP层缓存（ISP layer cache）</strong>:ISP缓存的工作方式与浏览器缓存基本相同。一旦你访问了一个网站，你的ISP可能会缓存这些页面，这样当你下次访问它们时，加载速度会更快。这样做的主要问题是，与浏览器缓存不同，你不能删除这些临时文件，必须等待ISP的缓存过期才能请求文件的新副本。</li></ol><h2 id="缓存失效（Cache-Invalidation）"><a href="#缓存失效（Cache-Invalidation）" class="headerlink" title="缓存失效（Cache Invalidation）"></a>缓存失效（Cache Invalidation）</h2><p>如果数据库中的数据被更改，它在缓存中应该是无效的，否则可能会触发不一致的应用程序操作。当前主要有三种缓存系统设计方案：</p><ol><li><strong>Write through cache</strong>：通过缓存执行写操作，只有当写DB和缓存都成功时，写操作才被验证为成功。在缓存和存储之间，将拥有完全的数据一致性。在崩溃、电源故障或其他系统干扰的情况下，任何东西都不会丢失。然而，在这种情况下，因为要写入两个不同的系统，写入延迟会更高。</li><li><strong>Write around cache</strong>：写操作绕过缓存，直接写入DB。在缓存读取过程中，由于数据不在缓存中，cache miss会增加，缓存设备需要从数据库中读取信息。因此，在快速写入和重新读取数据的应用程序中，这可能会导致更高的读延迟。</li><li><strong>Write back cache</strong>：写操作直接发送给缓存层，一旦缓存的写操作完成，就认为写操作成功。然后缓存异步的将写操作同步到DB。对于写密集型应用，这可以降低写延迟以及提高写吞吐量。但是，因为缓存是写入数据的唯一副本，如果缓存层被关闭，有可能丢失数据。通过在缓存中部署多个可以识别写操作的副本，我们可以尽量减少数据丢失的风险。</li></ol><h1 id="缓存的好处"><a href="#缓存的好处" class="headerlink" title="缓存的好处"></a>缓存的好处</h1><ol><li><strong>提高应用程序性能</strong>—缓存可以用来==提高系统性能和降低API延迟==。</li><li><strong>降低数据库成本</strong>——缓存会占用缓存服务器的额外流量，从而==减少数据库流量==，最终降低数据库成本。</li><li><strong>减轻后端负载</strong>——将相同的请求流量从主服务器卸载到缓存服务器将减轻后端负载。</li><li>**增加读吞吐量(IOPS)**——缓存服务器对缓存数据的响应比主服务器快得多，这增加了读吞吐量。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Hexo部署到云服务器(CentOS)</title>
      <link href="/2023/02/09/%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/02/09/%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h2><p>输入下面命令即可安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//方法一：</span><br><span class="line">sudo apt install git</span><br><span class="line">//方法二：</span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p>查看git版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version </span><br></pre></td></tr></table></figure><h2 id="2-配置参数"><a href="#2-配置参数" class="headerlink" title="2. 配置参数"></a>2. 配置参数</h2><p>接下来在git中配置自己的名称和电子邮件地址，可以通过使用以下命令来完成此操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot; </span><br><span class="line">git config --global user.email &quot;用户邮箱&quot;</span><br></pre></td></tr></table></figure><p>可以通过下面命令查看是否正确配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209171308239.png" alt="git安装与配置" style="zoom: 80%;" /><h2 id="3-创建一个ssh-key"><a href="#3-创建一个ssh-key" class="headerlink" title="3.创建一个ssh key"></a>3.创建一个ssh key</h2><p>作用：将电脑和github账号联系在一起的密钥，可以十分方便的通过git上传代码。</p><p>获取密钥的方法如下：</p><p>首先在命令行输入cd ~/.ssh，第一次配置会显示没有那个文件或目录，这是正常现象。</p><p>然后在命令行输入ssh-keygen -t rsa -C “邮箱地址”，接下来连按三次回车就可以了。</p><p>命令行代码如下：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209171948768.png" alt="创建ssh key" style="zoom:80%;" /><p>密钥就创建成功了。</p><p>打开/root/.ssh文件夹下id_rsa.pub文件，复制里面的内容</p><h2 id="4-登录GitHub添加ssh-key"><a href="#4-登录GitHub添加ssh-key" class="headerlink" title="4.登录GitHub添加ssh key"></a>4.登录GitHub添加ssh key</h2><p>选择setting里面的SSH and GPG keys选项</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209172417818.png" alt="SSH and GPG keys"></p><p>点击New SSH keys后界面如下图所示，Title是给密钥起一个名字，随便起一个就行，之后把刚刚复制的密钥填写在下边的大框里，点击Add SSH keys即可。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209172508480.png" alt="New SSH keys"></p><h2 id="5-创建用户并配置初始化仓库"><a href="#5-创建用户并配置初始化仓库" class="headerlink" title="5.创建用户并配置初始化仓库"></a>5.创建用户并配置初始化仓库</h2><p>创建一个 git 仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useradd git </span><br><span class="line">passwd git // 设置密码</span><br><span class="line">su git // 这步很重要，避免文件权限的各种问题</span><br><span class="line"><span class="built_in">cd</span> /home/git/</span><br><span class="line"><span class="built_in">mkdir</span> -p project/hexo-blog // 项目存在的真实目录,存放hexo静态文件</span><br><span class="line"><span class="built_in">mkdir</span> repos &amp;&amp; <span class="built_in">cd</span> repos // 放置git仓库的文件夹</span><br><span class="line">git init --bare hexo-blog-repo.git// 创建一个裸露的仓库</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209175642145.png" alt="配置初始化仓库"></p><h2 id="6-创建钩子函数"><a href="#6-创建钩子函数" class="headerlink" title="6.创建钩子函数"></a>6.创建钩子函数</h2><p> 新建文件夹hexo-blog-repo.git 在文件夹中创建钩子post-receive，把提交到 git 仓库的文件同步到 home/hexo文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-blog-repo.git/hooks //进入hooks文件夹</span><br><span class="line">vim post-receive //创建hook钩子函数文件(git提交时自动部署)，</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209175759880.png" alt="钩子函数"></p><p>编写内容如下：（i进入insert模式，编写完毕后按Esc，连按两次Z保存退出）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree=/home/git/projects/hexo-blog --git-dir=/home/git/repos/hexo-blog-repo checkout -f</span><br></pre></td></tr></table></figure><h2 id="7-修改权限"><a href="#7-修改权限" class="headerlink" title="7.修改权限"></a>7.修改权限</h2><p>chmod用法： 用来修改某个目录或文件的访问权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x post-receive</span><br><span class="line"><span class="built_in">exit</span> // 退出到 root 登录</span><br><span class="line"><span class="built_in">chown</span> -R git:git /home/git/repos/hexo-blog-repo.git // 添加权限</span><br></pre></td></tr></table></figure><h2 id="8-测试能否拉取"><a href="#8-测试能否拉取" class="headerlink" title="8.测试能否拉取"></a>8.测试能否拉取</h2><p>在本地打开一个终端，以 ssh 的方式登录云服务器</p><p>server_ip：用户的服务器ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@server_ip</span><br><span class="line">// 输入密码 即可成功登录云服务器</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230210135945164.png" alt=" ssh 登录云服务器" style="zoom: 80%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server_ip:/home/git/repos/hexo-blog-repo.git</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209180030554.png" alt="clone结果" style="zoom:80%;" /><h2 id="9-建立客户端与服务器的-SSH-免密连接"><a href="#9-建立客户端与服务器的-SSH-免密连接" class="headerlink" title="9.建立客户端与服务器的 SSH 免密连接"></a>9.建立客户端与服务器的 SSH 免密连接</h2><p>创建 authorized_keys 以及配置权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git/.ssh</span><br><span class="line"><span class="built_in">touch</span> authorized_keys  //存放客户端的ssh公钥(id_rsa.pub)</span><br><span class="line"><span class="built_in">chmod</span> 600 authorized_keys   //配置权限</span><br></pre></td></tr></table></figure><h2 id="10-生成密钥对（已有的请忽略）"><a href="#10-生成密钥对（已有的请忽略）" class="headerlink" title="10.生成密钥对（已有的请忽略）"></a>10.生成密钥对（已有的请忽略）</h2><p>进入你本机的(windows) c:/Users/电脑名称/.ssh 文件夹下，查看是否有名为 <code>id_rsa.pub</code> 和 <code>id_rsa</code> 的文件：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209180411071.png" alt="本机密钥对" style="zoom:67%;" /><p>如果有，请跳过下面 <strong>生成密钥</strong> 这一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><blockquote><p>中途不管你提示啥，一直Enter就是了，生成成功的话会在控制台打印出一个图案</p></blockquote><h2 id="11-建立-SSH-信任关系（免密登录）"><a href="#11-建立-SSH-信任关系（免密登录）" class="headerlink" title="11.建立 SSH 信任关系（免密登录）"></a>11.建立 SSH 信任关系（免密登录）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i C:/Users/电脑用户名/.ssh/id_rsa.pub git@server_ip</span><br><span class="line">ssh git@server_ip // 测试能否登录</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209200559093.png" alt="登录情况" style="zoom: 80%;" /><p>注意本地 ssh-keygen生成密钥对时<strong>最好不要对密钥对进行重命名</strong></p><h2 id="12-限制-git-用户的权限"><a href="#12-限制-git-用户的权限" class="headerlink" title="12.限制 git 用户的权限"></a>12.限制 git 用户的权限</h2><p>为了安全起见，最好是将 git 用户的权限设置为只能执行 <strong>git clone , git push</strong> 命令等等：</p><p>/usr/bin/git-shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 查看 git-shell 是否在登录方式里面</span><br><span class="line"><span class="built_in">cat</span> /etc/shells </span><br><span class="line">// 查看是否安装</span><br><span class="line"><span class="built_in">which</span> git-shell</span><br><span class="line">//添加第2步显示出来的路径，通常为 /usr/bin/git-shell</span><br><span class="line">vim /etc/shells</span><br></pre></td></tr></table></figure><p>/etc/shells内容：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209201858460.png" alt="/etc/shells内容" style="zoom:80%;" /><p>同时修改 /etc/passwd 文件内容，更改权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将原来的:</span><br><span class="line">git:x:1002:1002::/home/git:/bin/bash //原来的</span><br><span class="line">修改为:</span><br><span class="line">git:x:1001:1001::/home/git:/usr/bin/git-shell //修改之后</span><br></pre></td></tr></table></figure><h2 id="13-安装配置-Nginx"><a href="#13-安装配置-Nginx" class="headerlink" title="13.安装配置 Nginx"></a>13.安装配置 Nginx</h2><h4 id="13-1安装"><a href="#13-1安装" class="headerlink" title="13.1安装"></a>13.1安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src </span><br><span class="line">wget <span class="string">&quot;http://nginx.org/download/nginx-1.17.8.tar.gz&quot;</span> //下载安装文件</span><br><span class="line">tar -xvzf nginx-1.17.8.tar.gz -C ../</span><br><span class="line"><span class="built_in">cd</span> ../nginx-1.17.8</span><br><span class="line">./configure --prefix=/usr/local/nginx-webServer --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module </span><br><span class="line">make &amp;&amp; make install // 编译安装</span><br><span class="line"><span class="built_in">alias</span> nginx=<span class="string">&#x27;/usr/local/nginx-webServer/sbin/nginx&#x27;</span> //取别名为nginx，方便调用</span><br></pre></td></tr></table></figure><p>根据上面的步骤，安装完成，在控制台输入</p><h4 id="13-2查看版本"><a href="#13-2查看版本" class="headerlink" title="13.2查看版本"></a>13.2查看版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>可看到版本信息，代表安装成功</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209202213615.png" alt="nginx版本" style="zoom:80%;" /><h4 id="13-3运行"><a href="#13-3运行" class="headerlink" title="13.3运行"></a>13.3运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>如果80端口被占用</p><h4 id="13-4安装iptables服务"><a href="#13-4安装iptables服务" class="headerlink" title="13.4安装iptables服务"></a>13.4安装iptables服务</h4><p>需要通过防火墙开放对外端口。如果服务器上没有iptables服务，需要安装。如果有，则跳过。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install iptables-services</span><br><span class="line">systemctl mask firewalld.service</span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service</span><br><span class="line">systemctl <span class="built_in">enable</span> ip6tables.service</span><br></pre></td></tr></table></figure><h4 id="13-5配置端口"><a href="#13-5配置端口" class="headerlink" title="13.5配置端口"></a>13.5配置端口</h4><p>进入iptables配置80端口，因为nginx默认是由80端口访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>打开后，默认的配置信息如下（加粗部分为新添加的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [6:696]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line">A INPUT -p tcp -m state --state NEW -m tcp --dport 30000:30999 -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure><p>后续需要开放其它端口，也是在此文件中添加修改即可！</p><p>修改完后，保存退出文件编辑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure><h4 id="13-6重启防火墙"><a href="#13-6重启防火墙" class="headerlink" title="13.6重启防火墙"></a>13.6重启防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart iptables.service</span><br></pre></td></tr></table></figure><h4 id="13-7端口占用问题"><a href="#13-7端口占用问题" class="headerlink" title="13.7端口占用问题"></a>13.7端口占用问题</h4><p>1）<strong>先查看80端口被什么占用了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuser -n tcp 80</span><br></pre></td></tr></table></figure><p>2）<strong>将占用端口杀掉</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程号</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209203733586.png" alt="杀掉占用端口" style="zoom:80%;" /><h2 id="14-Nginx详细配置"><a href="#14-Nginx详细配置" class="headerlink" title="14.Nginx详细配置"></a>14.Nginx详细配置</h2><p>将 user 修改为 root //避免权限不足无法访问博客目录<br>将 root 解析路径修改为博客目录 /home/git/project/hexo-blog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop //先停止nginx</span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx-webServer/conf</span><br><span class="line">vim nginx.conf //打开配置文件</span><br><span class="line">nginx -s reload //重启nginx</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209213256203.png" alt="Nginx原先配置" style="zoom:80%;" /><p>更改之后</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209213508091.png" alt="Nginx配置更新" style="zoom:80%;" /><h2 id="15-配置站点配置文件"><a href="#15-配置站点配置文件" class="headerlink" title="15.配置站点配置文件"></a>15.配置站点配置文件</h2><p>config.yml 的 deploy:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">        server: git@server_ip:/home/git/repos/hexo-blog-repo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>server_ip : 即你购买的服务器的 IP 地址</p><p>部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> CentOS </tag>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS下安装yum</title>
      <link href="/2023/02/09/CentOS%E5%AE%89%E8%A3%85yum/"/>
      <url>/2023/02/09/CentOS%E5%AE%89%E8%A3%85yum/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS下安装yum"><a href="#CentOS下安装yum" class="headerlink" title="CentOS下安装yum"></a>CentOS下安装yum</h1><p>查看已安装的yumrpm -qa|grep yum</p><p>删除已有的yumrpm -aq|grep yum|xargs rpm -e –nodeps</p><p>下载以下安装包wget <a href="http://tel.mirrors.163.com/centos/7/os/x86_64/Packages/pyth">http://tel.mirrors.163.com/centos/7/os/x86_64/Packages/pyth</a></p><h2 id="1-查看已安装的yum"><a href="#1-查看已安装的yum" class="headerlink" title="1.查看已安装的yum"></a>1.查看已安装的yum</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span>|<span class="keyword">grep</span> yum</span><br></pre></td></tr></table></figure><h2 id="2-删除已有的yum"><a href="#2-删除已有的yum" class="headerlink" title="2.删除已有的yum"></a>2.删除已有的yum</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -aq|<span class="keyword">grep</span> yum|xargs rpm -<span class="keyword">e</span> --nodeps </span><br></pre></td></tr></table></figure><h2 id="3-下载所需安装包"><a href="#3-下载所需安装包" class="headerlink" title="3.下载所需安装包"></a>3.下载所需安装包</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://tel.mirrors.<span class="number">163</span>.<span class="keyword">com</span>/centos/<span class="number">7</span>/os/x86_64/Packages/<span class="keyword">python</span>-<span class="number">2.7</span>.<span class="number">5</span>-<span class="number">89</span>.el7.x86_64.rpm </span><br><span class="line">wget http://tel.mirrors.<span class="number">163</span>.<span class="keyword">com</span>/centos/<span class="number">7</span>/os/x86_64/Packages/<span class="keyword">python</span>-iniparse-<span class="number">0.4</span>-<span class="number">9</span>.el7.noarch.rpm </span><br><span class="line">wget http://tel.mirrors.<span class="number">163</span>.<span class="keyword">com</span>/centos/<span class="number">7</span>/os/x86_64/Packages/yum-<span class="number">3.4</span>.<span class="number">3</span>-<span class="number">168</span>.el7.centos.noarch.rpm</span><br><span class="line">wget http://tel.mirrors.<span class="number">163</span>.<span class="keyword">com</span>/centos/<span class="number">7</span>/os/x86_64/Packages/yum-metadata-parser-<span class="number">1.1</span>.<span class="number">4</span>-<span class="number">10</span>.el7.x86_64.rpm</span><br><span class="line">wget http://tel.mirrors.<span class="number">163</span>.<span class="keyword">com</span>/centos/<span class="number">7</span>/os/x86_64/Packages/yum-plugin-fastestmirror-<span class="number">1.1</span>.<span class="number">31</span>-<span class="number">54</span>.el7_8.noarch.rpm</span><br></pre></td></tr></table></figure><p>如果找不到以上版本，可以到 <a href="http://tel.mirrors.163.com/centos/7/os/x86_64/Packages/?login=from_csdn">http://tel.mirrors.163.com/centos/7/os/x86_64/Packages/</a> 下载最新版本</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20210505211959838.png" alt="下载最新版本"></p><h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh <span class="keyword">python</span>-<span class="number">2.7</span>.<span class="number">5</span>-<span class="number">89</span>.el7.x86_64.rpm <span class="keyword">python</span>-iniparse-<span class="number">0.4</span>-<span class="number">9</span>.el7.noarch.rpm --nodeps --force</span><br><span class="line">rpm -ivh yum-metadata-parser-<span class="number">1.1</span>.<span class="number">4</span>-<span class="number">10</span>.el7.x86_64.rpm --nodeps --force</span><br><span class="line">rpm -ivh yum-<span class="number">3.4</span>.<span class="number">3</span>-<span class="number">168</span>.el7.centos.noarch.rpm yum-plugin-fastestmirror-<span class="number">1.1</span>.<span class="number">31</span>-<span class="number">54</span>.el7_8.noarch.rpm --nodeps --force</span><br></pre></td></tr></table></figure><h2 id="5-更改-yum源"><a href="#5-更改-yum源" class="headerlink" title="5.更改 yum源"></a>5.更改 yum源</h2><ul><li><p>到该网站 <a href="http://mirrors.163.com/.help/centos.html?login=from_csdn">http://mirrors.163.com/.help/centos.html</a> 下载配置文件，重命名为CentOS-Base.repo</p><ul><li><p>首先备份/etc/yum.repos.d/CentOS-Base.repo</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure></li><li><p>下载对应版本repo文件， 放入/etc/yum.repos.d/（操作前请做好相应备份）</p><p><a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo?login=from_csdn">CentOS7</a></p><p><a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo?login=from_csdn">CentOS6</a></p><p><a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo?login=from_csdn">CentOS5</a></p></li><li><p>运行以下命令生成缓存</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean <span class="keyword">all</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><ul><li>运行一下命令打开CentOS-Base.repo文件</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /etc/yum.repos.d </span><br><span class="line"></span><br><span class="line"><span class="keyword">vim</span> CentOS-Base.repo</span><br></pre></td></tr></table></figure><blockquote><p>也可以通过Xftp7软件编辑，更加方便快捷</p></blockquote><ul><li>将以下配置更换Centos-Base.repo里的内容</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># CentOS-Base.repo</span><br><span class="line">#</span><br><span class="line"># The mirror <span class="built_in">system</span> uses the connecting IP address of the client <span class="built_in">and</span> the</span><br><span class="line"># <span class="keyword">update</span> status of each mirror <span class="keyword">to</span> pick mirrors that are updated <span class="keyword">to</span> <span class="built_in">and</span></span><br><span class="line"># geographically <span class="keyword">close</span> <span class="keyword">to</span> the client.  You should use this <span class="keyword">for</span> CentOS updates</span><br><span class="line"># unless you are manually picking other mirrors.</span><br><span class="line">#</span><br><span class="line"># If the mirrorlist= does not work <span class="keyword">for</span> you, <span class="keyword">as</span> <span class="keyword">a</span> fall back you can <span class="keyword">try</span> the</span><br><span class="line"># remarked out baseurl= <span class="built_in">line</span> instead.</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"> </span><br><span class="line">[base]</span><br><span class="line">name=CentOS-$releasever - Base</span><br><span class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</span><br><span class="line">baseurl=https://mirrors.ustc.edu.<span class="keyword">cn</span>/centos/$releasever/os/$basearch/</span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="keyword">file</span>:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"> </span><br><span class="line">#released updates</span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-$releasever - Updates</span><br><span class="line"># mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</span><br><span class="line">baseurl=https://mirrors.ustc.edu.<span class="keyword">cn</span>/centos/$releasever/updates/$basearch/</span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="keyword">file</span>:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"> </span><br><span class="line">#additional packages that may <span class="keyword">be</span> useful</span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-$releasever - Extras</span><br><span class="line"># mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</span><br><span class="line">baseurl=https://mirrors.ustc.edu.<span class="keyword">cn</span>/centos/$releasever/extras/$basearch/</span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="keyword">file</span>:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br><span class="line"> </span><br><span class="line">#additional packages that <span class="built_in">extend</span> functionality of existing packages</span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-$releasever - Plus</span><br><span class="line"># mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus</span><br><span class="line">baseurl=https://mirrors.ustc.edu.<span class="keyword">cn</span>/centos/$releasever/centosplus/$basearch/</span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">enabled=<span class="number">0</span></span><br><span class="line">gpgkey=<span class="keyword">file</span>:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-<span class="number">7</span></span><br></pre></td></tr></table></figure><ul><li>配置完成后更新缓存</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean <span class="keyword">all</span></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li></ul><p>完成以上步骤就可以成功在Linux安装上yum</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> CentOS </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picgo图床设置与typora配置</title>
      <link href="/2023/01/11/picgo-config/"/>
      <url>/2023/01/11/picgo-config/</url>
      
        <content type="html"><![CDATA[<h1 id="picgo图床设置与typora配置"><a href="#picgo图床设置与typora配置" class="headerlink" title="picgo图床设置与typora配置"></a>picgo图床设置与typora配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    PicGo是一个热门的图床工具，是可以自动把本地图片转换成链接的一款工具，是一款简洁容易操作的图床工具，可以支持微博、腾讯云、Github、阿里云等常用图床，功能可以说非常强大。</p><p>​    Typora是一款跨平台的Markdown编辑器软件，我们常常用它来写笔记或者博客。当使用Typora做笔记时，常常需要上传知识点截图到笔记上。截图图像为本地图像（存储在自己的电脑上，当我们把电脑本地图像进行删除或者误删时，再次打开笔记之前的截图都会显示丢，或者作为博客时，需要部署到远程仓库或服务器，而本地图片显然不能满足我们的需求。</p><p>​    使用PicGo图床工具将截图图像转换成链接或者上传到远程仓库服务器，当下次打开笔记或者查看远程博客时，编辑器会通过链接返回图像，上传后删除本地图像图像也不会丢失。下面将以配置picgo来介绍图床的搭建和配置使用以及介绍typora的图床配置。    </p><h2 id="PicGo下载"><a href="#PicGo下载" class="headerlink" title="PicGo下载"></a>PicGo下载</h2><p>Picgo最新图床工具下载链接：</p><p><a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p>mac系统选择dmg下载，windows选择.exe下载。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111200044898.png" alt="图床下载地址"></p><p><strong>此处建议下载稳定的正式版本。</strong></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111200208026.png" alt="下载最新稳定版本"></p><p><strong>翻到下面进行下载安装。</strong></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230111200504555.png" alt="下载对应系统版本"></p><h2 id="图床搭建"><a href="#图床搭建" class="headerlink" title="图床搭建"></a>图床搭建</h2><p>​    下面将介绍和使用==GitHub==来作为==图床==的具体用法。由于在国内有时无法访问GitHub或者速度过慢，可以先搭个梯子。</p><h3 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h3><hr><ol><li><p>首先登陆 GitHub，点击右上角的==+==，点击新建一个**仓库（New repository)**。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111201103490.png" alt="新建仓库"></p></li><li><p>进入页面，设置仓库名称， 选择仓库类型为==公开（Public）==， 由于私有仓库只有自己能够访问，上传图像后无法显示，所以必须时公有仓库。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111201536456.png" alt="设置远程仓库"></p></li><li><p>创建远程仓库后，点击右上角头像，进入设置。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111201701845.png" alt="进入设置"></p></li><li><p>接下来需要在 github 上生成一个token以便于 PicGo  根据令牌信息上传图像到我们的仓库。进入设置后，划到最下面左边栏中选择==开发人员设置（Developer  settings）==进入页面就可以看到 Personal access tokens。</p></li><li><p>点击==Generate new token== 创建一个新token，这里选择classic模式。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111202739291.png" alt="Generate选项"></p></li><li><p>生成令牌，过程如图，选择完后划到最下面按下==Generate token==，即可生成令牌。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111203414659.png" alt="生成令牌过程"></p></li><li><p>生成token如图所示，请注意蓝色框提醒==务必立即复制您的个人访问令牌。你将无法再看到它==，请先将生成的token复制保存下来，退出此页面后将<strong>再也看不到该token</strong>。</p></li></ol><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111203754137.png" alt="复制令牌"></p><h3 id="PicGo配置与使用"><a href="#PicGo配置与使用" class="headerlink" title="PicGo配置与使用"></a>PicGo配置与使用</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><hr><p>​    打开 PicGo，进入github设置</p><ul><li>仓库名格式： <code>用户名/仓库名</code>，例如<code>reasonllh/picgoIMG</code></li><li>分支名：main</li><li>token令牌：刚刚从复制保存的token令牌粘贴到此处</li><li>可以将此设置为默认图床</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111204300355.png" alt="picGo图床设置"></p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>​    picgo的图片上传方式就很多了，可以将图片拖拽到此处，也可以上传图片上传，更多的用法可以参考官方文档：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230210214242635.png" alt="picgo图片上传区" style="zoom:67%;" /><hr><h2 id="Typora图床设置"><a href="#Typora图床设置" class="headerlink" title="Typora图床设置"></a>Typora图床设置</h2><p>​    相信很多小伙伴也跟Reason一样有写博客的需求，而typora是一款很多程序员使用的编写markdown格式的软件，下面将介绍typora的图床有关配置。</p><ol><li>打开<code>Typora</code>，点击左上角菜单栏进入==偏好设置==。</li><li>选择 <code>图像</code> ，在<code>上传服务</code>一栏中选择<code>PicGo</code>。注意如果是windows的话还需要选择PicGo.exe的路径，最后点击<code>验证图片上传选项</code>显示成功即Typora配置图床工具完成。</li></ol><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111205309304.png" alt="typora设置"></p><ol><li><p>将图片放入Typora笔记中，右击图像选择==上传图片==即可上传到远程仓库。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111205714617.png" alt="上传图片选项">               </p></li></ol><p>​                                                            </p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picGo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sin</title>
      <link href="/2023/01/11/sin/"/>
      <url>/2023/01/11/sin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>about hexo</title>
      <link href="/2023/01/11/about%20hexo/"/>
      <url>/2023/01/11/about%20hexo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/blinkfox/hexo-theme-matery">blinkfox/hexo-theme-matery：一个漂亮的hexo博客主题，具有材料设计和响应式设计而成的全面、美观的Hexo主题。国内访问：http://blinkfox.com (github.com)</a></p><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-3">Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐 (blinkfox.github.io)</a></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111222235606.png" alt="image-20230111222235606"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex弹性盒子</title>
      <link href="/2023/01/07/M1D7/"/>
      <url>/2023/01/07/M1D7/</url>
      
        <content type="html"><![CDATA[<p>2023.1.7</p><p>[HTML学习](<a href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML：超文本标记语言|多核 (mozilla.org)</a>)</p><h1 id="Flex弹性盒子学习"><a href="#Flex弹性盒子学习" class="headerlink" title="Flex弹性盒子学习"></a><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex弹性盒子学习</a></h1><h2 id="一、弹性盒子介绍"><a href="#一、弹性盒子介绍" class="headerlink" title="一、弹性盒子介绍"></a>一、弹性盒子介绍</h2><p>​    采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108152912342.png" alt="Flex 容器" style="zoom:80%;" /><p>​    容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。<strong>项目默认沿主轴排列</strong>。</p><p>​    主轴的开始位置（与边框的交叉点）叫==main start==，结束位置叫做==main end==；</p><p>​    交叉轴的开始位置叫==cross start==，结束位置叫==cross end==。</p><p>​    单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p><h2 id="二、容器的属性"><a href="#二、容器的属性" class="headerlink" title="二、容器的属性"></a>二、容器的属性</h2><ul><li><strong>flex-direction:row | row-reverse | column | column-reverse;</strong></li><li><strong>flex-wrap:nowrap | wrap | wrap-reverse;</strong></li><li><strong>flex-flow: flex-direction || flex-wrap;</strong></li><li><strong>justify-content:flex-start | flex-end | center | space-between | space-around;</strong></li><li><strong>align-items:flex-start | flex-end | center | baseline | stretch;</strong></li><li><strong>align-content:flex-start | flex-end | center | space-between | space-around | stretch;</strong></li></ul><p><strong>2.1flex-direction主轴的方向（即项目的排列方向）</strong></p><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul><p><strong>2.2flex-wrap换行取值</strong></p><p>​    默认情况下，项目都排在一条线（又称”轴线”）上。如果一条轴线排不下，如何换行。</p><ul><li><p><code>nowrap</code>（默认）：不换行。</p></li><li><p><code>wrap</code>：换行，第一行在上方。</p></li><li><p><code>wrap-reverse</code>：换行，第一行在下方。</p></li></ul><p><strong>2.3<code>flex-flow</code>=<code>flex-direction</code>+<code>flex-wrap</code>，默认值为<code>row nowrap</code></strong></p><p><strong>2.4justify-content项目在主轴上的对齐方式</strong></p><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108154405854.png" alt="justify-content项目在主轴上的对齐方式" style="zoom:50%;" /><p><strong>2.5align-items项目在交叉轴上如何对齐</strong></p><p>​    具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108154638899.png" alt="align-items项目在交叉轴上对齐方式" style="zoom:50%;" /><p><strong>2.6align-content定义了多根轴线的对齐方式</strong></p><p>​    如果项目只有一根轴线，该属性不起作用。</p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108155228637.png" alt="align-content在多根轴线上的对齐方式" style="zoom:50%;" /><h2 id="三、项目的属性"><a href="#三、项目的属性" class="headerlink" title="三、项目的属性"></a>三、项目的属性</h2><p>以下6个属性设置在项目上</p><ul><li><code>order:&lt;integer&gt;;/* default 0 */</code></li><li><code>flex-grow</code>:<number>;/* default 0 */</li><li><code>flex-shrink</code>:<number>; /* default 1 */</li><li><code>flex-basis</code>:<length> | auto; /* default auto */</li><li><code>flex</code>:none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]</li><li><code>align-self</code>:auto | flex-start | flex-end | center | baseline | stretch;</li></ul><p><strong>3.1order项目的排列顺序</strong></p><p>​    数值越小，排列越靠前，默认为0。</p><p><strong>3.2flex-grow项目的放大比例</strong></p><p>​    默认为<code>0</code>，即如果存在剩余空间，也不放大</p><p>​    如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。</p><p>​    如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><p><strong>3.3flex-shrink项目的缩小比例</strong></p><p>​    默认为1，即如果空间不足，该项目将缩小。</p><p>​    如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。</p><p>​    如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。</p><p><strong>3.4flex-basis在分配多余空间之前，项目占据的主轴空间</strong></p><p>​    浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><p>​    它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><p><strong>3.5 flex=<code>flex-grow</code>+<code>flex-shrink</code> + <code>flex-basis</code></strong></p><p>​    默认值为<code>0 1 auto</code>。后两个属性可选。</p><p>​    该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p><p>​    建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><p><strong>3.6 align-self允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</strong></p><p>​    <code>align-self</code>属性默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/bg2015071016.png" alt="align-self允许单个项目有不一样的对齐方式" style="zoom:50%;" /><p>​    该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Flex </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
